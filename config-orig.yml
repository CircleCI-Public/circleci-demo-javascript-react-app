# Orb 'circleci/slack@4.4.4' resolved to 'circleci/slack@4.4.4'
version: 2
jobs:
  linux-system-tests-mem:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - NN_FUNC_TESTS_RAND_SEED: '1643156835'
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - attach_workspace:
        at: ~/project/
    - run:
        name: Run system test
        command: heaptrack -o system_test_navigation.heaptrack build/test/system/system_test_navigation --history-path histories --time-scale 10 --duration $((10 * 1 * 60 * 60))
    - run:
        name: Get system test stats
        command: |
          PEAK_HEAP=$(heaptrack_print system_test_navigation.heaptrack.gz | sed -En 's/peak heap memory consumption: (.*)/\1/p')
          PEAK_HEAP=$(numfmt --from=si ${PEAK_HEAP%*B})
          JSON="[{\"peak_heap\": $PEAK_HEAP}]"
          echo $JSON
          node scripts/metrics/publish.js --definition scripts/metrics/definitions/systest-mem-usage.definition.js --measurement <(echo "$JSON") --name "System test memory usage"
    - store_artifacts:
        path: histories
    - store_artifacts:
        path: system_test_navigation.heaptrack.gz
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
  run-functional-tests-tsan-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=0
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_THREAD_SANITIZER=ON
          make -j${CPU_COUNT} functional_test_navigation  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Functional Tests
        command: |
          pushd build
          set +e
          if [[ "ON" == "ON" ]]; then
              TEST_RES=$(NN_FUNC_TESTS_RAND_SEED=4243 test/functional/functional_test_navigation --verbose)
          else
              TEST_RES=$(test/functional/functional_test_navigation --verbose)
          fi
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] ; then
            echo "$TEST_RES" | tee fail_log.txt | grep "\[ Failure \] History saved to" | awk '{$1=$2=$3=$4=$5=$6=""; print $0}' | xargs tar -zcvf func_test_traces.tar.gz fail_log.txt
          fi
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/func_test_traces.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
  linux-coverage:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-6-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Process coverage and upload to codecov
        command: ./scripts/ci/coverage.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  compute-high-level-metrics-osm-any:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: echo "/data/tiles/" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ /data/tiles/
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-high-level-metrics-data-metrics-full
    - run:
        name: Compute metrics
        no_output_timeout: 20m
        command: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          echo -n 'Node version: ' && node -v
          pushd scripts/metrics
          node high-level-metrics.js \
            --history_player_path ../../build/tools/history_player/history_player \
            --s3_folder "metrics-full" \
            --metric_name "map-matching-metrics-full-nightly-osm-any" \
            --data_provider "osm" \
            --trace_data_provider "any" \
            --driving_modes "active-guidance,free-drive" \
            --signal_profiles "Original,Automotive,Mobile (good)" \
            --metrics_tag_filter "nightlyMetricsData"
          popd
    - run:
        name: Collect coredump
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: temp_results.tgz
    - store_artifacts:
        path: metrics-parallel.log
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-high-level-metrics-data-metrics-full
        paths:
        - /data/traces/
    - run:
        command: |
          echo "/data/tiles/" > .cache_folder_cache_key
          ls -LR /data/tiles/ > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - /data/tiles/
    - run:
        command: aws s3 sync /data/tiles/ s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  sdk-registry-create-pr-and-wait-for-approval:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Create PR
        command: |
          SDK_REGISTRY_PR_LINK_OUTPUT=$(pwd)/.sdk-registry-pull-link
          ./scripts/ci/release/sdk-registry-pr.sh $CIRCLE_TAG $SDK_REGISTRY_PR_LINK_OUTPUT
          SDK_REGISTRY_PR_LINK=$(cat ${SDK_REGISTRY_PR_LINK_OUTPUT})
          # add it to `BASH_ENV` in order to make available for `slack/notify`
          echo "export SDK_REGISTRY_PR_LINK='${SDK_REGISTRY_PR_LINK}'" >> $BASH_ENV
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: .+
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: |
            {
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": ":raised_hand: ON HOLD:\nApprove and merge the PR in SDK registry to continue release"
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "Tag: *${CIRCLE_TAG}*"
                            },
                            {
                                "type": "mrkdwn",
                                "text": "Release engineer: *${CIRCLE_USERNAME}*"
                            }
                        ]
                    },
                    {
                        "type": "actions",
                        "elements": [
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "View PR in SDK registry"
                                },
                                "url": "${SDK_REGISTRY_PR_LINK}"
                            },
                            {
                                "type": "button",
                                "text": {
                                    "type": "plain_text",
                                    "text": "View Workflow"
                                },
                                "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
                            }
                        ]
                    }
                ]
            }
          SLACK_PARAM_EVENT: pass
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: ''
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    - run:
        name: Wait for SDK Registry PR to be merged
        command: |
          node scripts/ci/release/wait-sdk-registry-pr.js ${SDK_REGISTRY_PR_LINK}
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  publish-ios:
    macos:
      xcode: 12.5.0
    shell: /bin/bash --login -eo pipefail
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Install Bundle dependencies
        command: |
          pushd platform/ios/
          bundle install --path vendor/bundle
          popd
    - run:
        name: Publish to SPM
        command: |
          if [[ -z "${CIRCLE_TAG}" ]]; then
            >&2 echo "Not a release, skip...."
            exit 0
          fi
          ./scripts/ci/ios/publish-ios-spm.sh
    - run:
        name: Publish to CocoaPods
        command: |
          if [[ -z "${CIRCLE_TAG}" ]]; then
            >&2 echo "Not a release, skip...."
            exit 0
          fi
          pod repo add-cdn trunk https://cdn.cocoapods.org/
          if pod search MapboxNavigationNative --simple --no-pager | grep "$CIRCLE_TAG"; then
            >&2 echo "Release ${CIRCLE_TAG} was already released to CocoaPods. Skip CocoaPods publish."
            exit 0
          fi
          # packages in SDK registry are not available immediately, so we have to use some polling here
          retry=0
          until [ "$retry" -ge 15 ]
          do
            ./scripts/ci/ios/publish-ios-cocoapods.sh ${CIRCLE_TAG} && exit 0
            retry=$((retry+1))
            sleep 180
          done
          &>2 echo "Timeout..."
          exit 1
    - run:
        name: Add GitHub to known hosts (for SPM tests)
        command: |
          for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
    - run:
        name: Test Availability in Package Managers
        command: |
          # packages in package managers are not available immediately, so we have to use some polling here
          retry=0
          until [ "$retry" -ge 15 ]
          do
            ./scripts/ci/ios/package-managers-test.sh && exit 0
            retry=$((retry+1))
            sleep 180
          done
          &>2 echo "Timeout..."
          exit 1
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: null
    - CCACHE_LOGFILE: /Users/distiller/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/Users/distiller/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - LD_PRELOAD: null
    - HOMEBREW_NO_AUTO_UPDATE: 1
    - HOMEBREW_NO_INSTALL_CLEANUP: 1
    - MINT_PATH: /Users/distiller/mint/lib
    - MINT_LINK_PATH: /Users/distiller/mint/bin
  check-if-pr-is-ready:
    docker:
    - image: ghcr.io/siarheifedartsou/alpine-gh:gh2.0.0
    resource_class: small
    steps:
    - checkout
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Check if PR is ready for review
        command: |2

          if [ "$CIRCLE_TAG" != "" ]; then
            echo "We are on tag $CIRCLE_TAG."
            exit 0
          fi

          export GITHUB_TOKEN=$(mbx-ci github reader token)
          IS_BRANCH_PROTECTED=$(gh api repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/branches/$CIRCLE_BRANCH --jq .protected)
          if [ $IS_BRANCH_PROTECTED != "false" ]; then
            echo "We are on protected branch."
            exit 0
          fi

          COMMIT_MESSAGE=$(gh api repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/commits/$CIRCLE_SHA1 --jq .commit.message)
          if [ -z "${COMMIT_MESSAGE##*"full_ci"*}"  ]; then
            echo "Skipping checks and proceeding due to full_ci request."
            exit 0
          fi

          if [ -z "${COMMIT_MESSAGE##*"publish_android"*}" ] || [ -z "${COMMIT_MESSAGE##*"publish_ios"*}" ]; then
            echo "Publishing iOS or Android artifact."
            exit 0
          fi

          if [ -z "$CIRCLE_PULL_REQUEST" ]; then
            echo "No pull request created yet. Please create pull request in order to finish CI."
            exit 1
          fi

          echo "Checking PR $CIRCLE_PULL_REQUEST"

          IS_DRAFT=$(gh pr view --repo $CIRCLE_REPOSITORY_URL $CIRCLE_PULL_REQUEST --json isDraft --jq .isDraft)
          if [ $IS_DRAFT == "true" ]; then
            echo "Pull request is draft. Mark PR as ready for review and re-run pipeline in order to run the rest of CI."
            exit 1
          fi

          MERGEABLE=$(gh pr view --repo $CIRCLE_REPOSITORY_URL $CIRCLE_PULL_REQUEST --json mergeable --jq .mergeable)
          if [ $MERGEABLE != "MERGEABLE" ]; then
            echo "Pull request has conflicts with base branch($MERGEABLE). Fix conflicts and re-run pipeline in order to run the rest of CI."
            exit 1
          fi

          echo "PR is ok"
    environment:
    - GIT_LFS_SKIP_SMUDGE: 1
  linux-system-tests-asan-ubsan:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - attach_workspace:
        at: ~/project/
    - run:
        name: Run system test
        command: build/test/system/system_test_navigation --history-path histories --time-scale 10 --duration $((10 * 1 * 60 * 60))
    - store_artifacts:
        path: histories
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  compute-high-level-metrics-zenrin:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: echo "/data/tiles/" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ /data/tiles/
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-high-level-metrics-data-metrics-full
    - run:
        name: Compute metrics
        no_output_timeout: 20m
        command: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          echo -n 'Node version: ' && node -v
          pushd scripts/metrics
          node high-level-metrics.js \
            --history_player_path ../../build/tools/history_player/history_player \
            --s3_folder "metrics-full" \
            --metric_name "map-matching-metrics-full-nightly-zenrin" \
            --data_provider "zenrin" \
            --trace_data_provider "zenrin" \
            --driving_modes "active-guidance,free-drive" \
            --signal_profiles "Original,Automotive,Mobile (good)" \
            --metrics_tag_filter "nightlyMetricsData"
          popd
    - run:
        name: Collect coredump
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: temp_results.tgz
    - store_artifacts:
        path: metrics-parallel.log
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-high-level-metrics-data-metrics-full
        paths:
        - /data/traces/
    - run:
        command: |
          echo "/data/tiles/" > .cache_folder_cache_key
          ls -LR /data/tiles/ > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - /data/tiles/
    - run:
        command: aws s3 sync /data/tiles/ s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  compute-high-level-metrics-here:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: echo "/data/tiles/" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ /data/tiles/
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-high-level-metrics-data-metrics-full
    - run:
        name: Compute metrics
        no_output_timeout: 20m
        command: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          echo -n 'Node version: ' && node -v
          pushd scripts/metrics
          node high-level-metrics.js \
            --history_player_path ../../build/tools/history_player/history_player \
            --s3_folder "metrics-full" \
            --metric_name "map-matching-metrics-full-nightly-here" \
            --data_provider "here" \
            --trace_data_provider "here" \
            --driving_modes "active-guidance,free-drive" \
            --signal_profiles "Original,Automotive,Mobile (good)" \
            --metrics_tag_filter "nightlyMetricsData"
          popd
    - run:
        name: Collect coredump
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: temp_results.tgz
    - store_artifacts:
        path: metrics-parallel.log
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-high-level-metrics-data-metrics-full
        paths:
        - /data/traces/
    - run:
        command: |
          echo "/data/tiles/" > .cache_folder_cache_key
          ls -LR /data/tiles/ > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - /data/tiles/
    - run:
        command: aws s3 sync /data/tiles/ s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-gcc-tests:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - attach_workspace:
        at: ~/project/
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Build scenarios & run with memory profiler
        command: ./scripts/metrics/run-memory-tests.sh
    - run:
        name: Run performance tests
        command: ./scripts/metrics/run-performance-tests.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: "CPU_COUNT=$(getconf _NPROCESSORS_ONLN)\necho \"Building on ${CPU_COUNT} cores.\"\nmkdir -p build\npushd build\ncmake .. -DCMAKE_BUILD_TYPE=Release \nmake -j${CPU_COUNT}   | while read line ; do echo \"$(date +\"%T\") > $line\" ; done ;\npopd\n"
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - persist_to_workspace:
        root: ~/project/
        paths:
        - build/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - run:
        command: gcc --version
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release  -GNinja -DMBNN_ENABLE_MEMORY_PROF=ON -DMBNN_ENABLE_HISTORY_PLAYER=ON -DMBNN_ENABLE_DOGFOOD42=ON -DMBNN_ENABLE_QT_PLAYER=ON -DMBNN_ENABLE_GRAPHEX=ON -DMBNN_FORCE_BUILD_INCOMPATIBLE_TOOLS=ON -DMBNN_ENABLE_TREAT_WARNINGS_AS_ERRORS=ON -DMBNN_ENABLE_BENCHMARKS=ON -DMBNN_ENABLE_ADAS=ON
          ninja -j${CPU_COUNT}   | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - persist_to_workspace:
        root: ~/project/
        paths:
        - build/
        - bindings/generated/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  macos-tsan:
    macos:
      xcode: 12.5.0
    shell: /bin/bash --login -eo pipefail
    resource_class: large
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install macOS dependencies
        command: |
          # required to workaround issue with protobuf installation, otherwise it complains that this file already exists
          rm "/usr/local/lib/python3.9/site-packages/six.py"
          brew install cmake ccache awscli coreutils mint xcodegen protobuf
          python3 -m pip install requests==2.24.0

          # make tools installed via mint available in PATH
          echo "export PATH=$MINT_LINK_PATH:$PATH" >> $BASH_ENV
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_THREAD_SANITIZER=ON
          make -j${CPU_COUNT} run_tests  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: null
    - CCACHE_LOGFILE: /Users/distiller/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/Users/distiller/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - LD_PRELOAD: null
    - HOMEBREW_NO_AUTO_UPDATE: 1
    - HOMEBREW_NO_INSTALL_CLEANUP: 1
    - MINT_PATH: /Users/distiller/mint/lib
    - MINT_LINK_PATH: /Users/distiller/mint/bin
  lint:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: node --version
    - run:
        name: ESLint
        command: |
          npm run lint
    - run:
        name: Avoid using CMAKE_SOURCE_DIR
        command: |
          CMAKE_ISSUES=$(grep -r --exclude-dir=build --exclude-dir=.fetchcontentshared 'CMAKE_SOURCE_DIR' --include="*.cmake" --include="CMakeLists.txt" . | grep -v '${CMAKE_SOURCE_DIR}/.fetchcontentshared' || true)
          [[ -z "$CMAKE_ISSUES" ]] || (echo $'Avoid using CMAKE_SOURCE_DIR:\n'"$CMAKE_ISSUES" && false)
    - run:
        name: Lint flaky tests registry
        command: |
          ./scripts/flaky.js --lint --flakyTestRegistry test/fixtures/flaky-tests.json
    - run:
        name: Check licenses in submodules recursively
        command: ./scripts/ci/check-licenses.sh
    - store_artifacts:
        path: LICENSE.thirdparty
    - run:
        name: Validate markdown docs
        command: |
          # use .remarkignore file if you need to ignore some warning
          npm install --global remark-cli@9.0.0
          remark --frail --use validate-links .
    - run:
        name: Compare mapbox-sdk-common versions
        command: |
          python scripts/ci/checks/mapbox_sdk_common_version_validation.py
    - run:
        name: Lint bindings
        command: |
          python scripts/ci/checks/lint_bindings.py
    - restore_cache:
        keys:
        - v1/thirdpary-binaries/{{ checksum "scripts/format.sh" }}
    - run:
        command: ./scripts/format.sh
    - save_cache:
        when: always
        key: v1/thirdpary-binaries/{{ checksum "scripts/format.sh" }}
        paths:
        - thirdparty/binaries
    - run:
        command: git reset --hard && scripts/cmake-format.sh
    - store_artifacts:
        path: patches/cmake-format.patch
    - run:
        name: Ensure generated bindings are up-to-date
        command: |
          git reset --hard
          scripts/bindgen/lint.sh
    - run:
        command: python3 --version
    - run:
        name: Check ARTv2 response for gzip compressing
        command: |
          python3 -m venv .venvs/tile_downloader
          source .venvs/tile_downloader/bin/activate
          python3 -m pip install -r tools/tile_downloader/requirements.txt
          pytest -s -q tools/tile_downloader/test_tile_downloader.py
          deactivate
    - run:
        name: Check enum converters generating
        command: python -m unittest scripts/enum_converters/test_generate_enum_converters.py
    - run:
        name: Validate CI environment variable documentation
        command: |
          python3 scripts/ci/checks/environ_docs.py
    - run:
        name: Check changes in history.proto and if RAVE tooling team was notified about them
        command: ./scripts/ci/checks/check-rave-tooling-history-proto.js
    - run:
        name: Validate changelog
        command: ./scripts/changelog.js --validate
    - run:
        name: Check CodeBuild docker image version consistency
        command: scripts/ci/checks/codebuild_image.sh "234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51"
    - run:
        command: |
          COMMIT_MESSAGE=$(git log -1)
          if [[ "$COMMIT_MESSAGE" != *"full_ci"* && "$COMMIT_MESSAGE" != *"publish_android"* && "$COMMIT_MESSAGE" != *"publish_ios"* ]]; then
            ./scripts/ci/ci-circleci-cancel-workflow.py
          fi
        name: Cancel Workflow
        when: on_fail
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  compute-high-level-metrics-osm:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: echo "/data/tiles/" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ /data/tiles/
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-high-level-metrics-data-metrics-full
    - run:
        name: Compute metrics
        no_output_timeout: 20m
        command: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          echo -n 'Node version: ' && node -v
          pushd scripts/metrics
          node high-level-metrics.js \
            --history_player_path ../../build/tools/history_player/history_player \
            --s3_folder "metrics-full" \
            --metric_name "map-matching-metrics-full-nightly-osm" \
            --data_provider "osm" \
            --trace_data_provider "osm" \
            --driving_modes "active-guidance,free-drive" \
            --signal_profiles "Original,Automotive,Mobile (good)" \
            --metrics_tag_filter "nightlyMetricsData"
          popd
    - run:
        name: Collect coredump
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: temp_results.tgz
    - store_artifacts:
        path: metrics-parallel.log
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-high-level-metrics-data-metrics-full
        paths:
        - /data/traces/
    - run:
        command: |
          echo "/data/tiles/" > .cache_folder_cache_key
          ls -LR /data/tiles/ > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - /data/tiles/
    - run:
        command: aws s3 sync /data/tiles/ s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-asan-ubsan:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADDRESS_SANITIZER=ON -DMBNN_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER=ON -DMBNN_ENABLE_ADAS=ON
          make -j${CPU_COUNT}   | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  Compute Low-Level Metrics on BMW traces:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-low-level-metrics-data-bmw-2020-08-06
    - run:
        command: echo "~/tile-data" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ ~/tile-data
    - run:
        name: HMM metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder bmw-2020-08-06 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application auto \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name hmm-bmw-2020-08-06 \
            --metric hmm
          popd
    - run:
        name: Offline MM metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder bmw-2020-08-06 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application auto \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name offline-mm-bmw-2020-08-06 \
            --metric offline-mm
          popd
    - run:
        name: Location Predict metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder bmw-2020-08-06 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application auto \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name location-predict-bmw-2020-08-06 \
            --metric location-predict
          popd
    - run:
        name: Teleport metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder bmw-2020-08-06 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application auto \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name teleport-bmw-2020-08-06 \
            --metric teleport
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-low-level-metrics-data-bmw-2020-08-06
        paths:
        - ~/low-level-metrics-traces
    - run:
        command: |
          echo "~/tile-data" > .cache_folder_cache_key
          ls -LR ~/tile-data > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - ~/tile-data
    - run:
        command: aws s3 sync ~/tile-data s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-system-tests-tsan:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: medium
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - attach_workspace:
        at: ~/project/
    - run:
        name: Run system test
        command: build/test/system/system_test_navigation --history-path histories --time-scale 10 --duration $((10 * 1 * 60 * 60))
    - store_artifacts:
        path: histories
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-tsan-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_THREAD_SANITIZER=ON
          make -j${CPU_COUNT}   | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - persist_to_workspace:
        root: ~/project/
        paths:
        - build/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  run-adasis-poc-on-linux-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADAS=ON
          make -j${CPU_COUNT} Adasis_PoC_Demo  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Adasis PoC
        command: |
          pushd build
          set +e
          ADASIS_POC_RES=$(tools/Adasis_PoC_Demo/Adasis_PoC_Demo ../test/fixtures/adasis/mahwah-route.kml --tiles ../test/fixtures/tiles/api.mapbox.com/ --port 8111 --endpointVersion 2021_07_14-03_00_00 --enhancedFile ../test/fixtures/adasis/adasis_poc_shrinked.pbf.gz --visited_edges_output adasis_poc_run.geojson)
          echo "$ADASIS_POC_RES" | tee adasis_poc_run_log.txt | grep "Edges coverage: found " | awk '{if($4+1>1000){print "Success"}else{exit 1}}'
          EXIT_CODE=$?
          tar -zcvf adasis_poc_output.tar.gz adasis_poc_run_log.txt adasis_poc_run.geojson adasis_output_messages/*
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/adasis_poc_output.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-32bit:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-32bit-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_32BIT=ON -DMBNN_ENABLE_TREAT_WARNINGS_AS_ERRORS=OFF
          make -j${CPU_COUNT} run_tests  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  dogfood42-android:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:android-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Skip if tools/dogfood42 was not changed
        command: |
          set +e
          HAS_CHANGES=$(git diff --quiet HEAD master -- tools/dogfood42; echo $?)
          set -e
          if [[
            $HAS_CHANGES == 0 && \
            "$CIRCLE_BRANCH" != "master" && \
            "$(git log -1)" != *"full_ci"*
          ]]; then
            echo "No changes found in tools/dogfood42 and CI is on feature branch. Skip."
            circleci-agent step halt
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - restore_cache:
        keys:
        - v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        - v1/gradle
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Workaround for `#4533`
        command: mkdir build && cd build && cmake ..
    - run:
        name: Assemble
        command: |
          cd  platform/android
          ./gradlew --info --warning-mode all :dogfood42:assembleRelease
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        paths:
        - /root/.gradle
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - JVM_OPTS: -Xmx3200m
    - GRADLE_OPTS: -Xmx4096m -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
  run-functional-tests-tsan:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=0
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - run:
        name: Skip for regular CI
        command: |
          if [[ $IS_REGULAR_CI == 1 ]]; then
            echo "CI is regular. Skip..."
            circleci-agent step halt
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_THREAD_SANITIZER=ON
          make -j${CPU_COUNT} functional_test_navigation  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Functional Tests
        command: |
          pushd build
          set +e
          if [[ "ON" == "ON" ]]; then
              TEST_RES=$(NN_FUNC_TESTS_RAND_SEED=4243 test/functional/functional_test_navigation --verbose)
          else
              TEST_RES=$(test/functional/functional_test_navigation --verbose)
          fi
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] ; then
            echo "$TEST_RES" | tee fail_log.txt | grep "\[ Failure \] History saved to" | awk '{$1=$2=$3=$4=$5=$6=""; print $0}' | xargs tar -zcvf func_test_traces.tar.gz fail_log.txt
          fi
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/func_test_traces.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
  run-functional-tests-asan-ubsan:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=0
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADDRESS_SANITIZER=ON -DMBNN_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER=ON
          make -j${CPU_COUNT} functional_test_navigation  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Functional Tests
        command: |
          pushd build
          set +e
          if [[ "ON" == "ON" ]]; then
              TEST_RES=$(NN_FUNC_TESTS_RAND_SEED=4243 test/functional/functional_test_navigation --verbose)
          else
              TEST_RES=$(test/functional/functional_test_navigation --verbose)
          fi
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] ; then
            echo "$TEST_RES" | tee fail_log.txt | grep "\[ Failure \] History saved to" | awk '{$1=$2=$3=$4=$5=$6=""; print $0}' | xargs tar -zcvf func_test_traces.tar.gz fail_log.txt
          fi
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/func_test_traces.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
  static-analysis:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Static analysis
        command: |
          ./scripts/perform-static-analysis.sh
    - store_artifacts:
        path: cppcheck_report.txt
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-tsan-cpp17:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_THREAD_SANITIZER=ON -DCMAKE_CXX_STANDARD=17
          make -j${CPU_COUNT}   | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-onboard-router-tests:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Run tests
        command: |
          ./test/onboard_router_tests/run_tests.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  create-on-call-ticket:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
    - checkout
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Check recurring on-call ticket
        command: ./scripts/ci/create_recurring_on_call_ticket.js
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  linux-asan-ubsan-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADDRESS_SANITIZER=ON -DMBNN_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER=ON
          make -j${CPU_COUNT}   | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - persist_to_workspace:
        root: ~/project/
        paths:
        - build/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  Compute High-Level Metrics:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        command: echo "/data/tiles/" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ /data/tiles/
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-high-level-metrics-data-metrics-full
    - run:
        name: Compute metrics
        no_output_timeout: 20m
        command: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          echo -n 'Node version: ' && node -v
          pushd scripts/metrics
          node high-level-metrics.js \
            --history_player_path ../../build/tools/history_player/history_player \
            --s3_folder "metrics-full" \
            --metric_name "map-matching-metrics-full" \
            --data_provider "zenrin" \
            --trace_data_provider "zenrin" \
            --driving_modes "active-guidance,free-drive" \
            --signal_profiles "Mobile (good)" \
            --metrics_tag_filter "metricsData"
          popd
    - run:
        name: Collect coredump
        command: |
          mkdir -p /tmp/core_dumps
          cp core.* /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: /tmp/core_dumps
        when: on_fail
    - store_artifacts:
        path: temp_results.tgz
    - store_artifacts:
        path: metrics-parallel.log
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-high-level-metrics-data-metrics-full
        paths:
        - /data/traces/
    - run:
        command: |
          echo "/data/tiles/" > .cache_folder_cache_key
          ls -LR /data/tiles/ > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - /data/tiles/
    - run:
        command: aws s3 sync /data/tiles/ s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  android-native-tests-runner:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:android-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - restore_cache:
        keys:
        - v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        - v1/gradle
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Workaround for `#4533`
        command: mkdir build && cd build && cmake ..
    - run:
        name: Assemble
        no_output_timeout: 30m
        command: |
          cd  platform/android
          ./gradlew --info :native-tests-app:assembleRelease :native-tests-app:assembleReleaseAndroidTest
    - run:
        name: Run tests on Firebase
        no_output_timeout: 30m
        command: |
          ./scripts/ci/android/run_firebase_native_tests.sh \
            ./platform/android/native-tests-app/build/outputs/apk/release/native-tests-app-release.apk \
            ./platform/android/native-tests-app/build/outputs/apk/androidTest/release/native-tests-app-release-androidTest.apk
    - store_artifacts:
        path: firebase_instrumentation_tests_report.zip
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        paths:
        - /root/.gradle
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - JVM_OPTS: -Xmx3200m
    - GRADLE_OPTS: -Xmx4096m -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
  dogfood42-ios:
    macos:
      xcode: 12.5.0
    shell: /bin/bash --login -eo pipefail
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Skip if tools/dogfood42 was not changed
        command: |
          set +e
          HAS_CHANGES=$(git diff --quiet HEAD master -- tools/dogfood42; echo $?)
          set -e
          if [[
            $HAS_CHANGES == 0 && \
            "$CIRCLE_BRANCH" != "master" && \
            "$(git log -1)" != *"full_ci"*
          ]]; then
            echo "No changes found in tools/dogfood42 and CI is on feature branch. Skip."
            circleci-agent step halt
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install macOS dependencies
        command: |
          # required to workaround issue with protobuf installation, otherwise it complains that this file already exists
          rm "/usr/local/lib/python3.9/site-packages/six.py"
          brew install cmake ccache awscli coreutils mint xcodegen protobuf
          python3 -m pip install requests==2.24.0

          # make tools installed via mint available in PATH
          echo "export PATH=$MINT_LINK_PATH:$PATH" >> $BASH_ENV
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Configure
        command: |
          ./tools/dogfood42/ios/configure.sh
    - run:
        name: Build
        no_output_timeout: 30m
        command: |
          ./tools/dogfood42/ios/build.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: null
    - CCACHE_LOGFILE: /Users/distiller/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/Users/distiller/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - LD_PRELOAD: null
    - HOMEBREW_NO_AUTO_UPDATE: 1
    - HOMEBREW_NO_INSTALL_CLEANUP: 1
    - MINT_PATH: /Users/distiller/mint/lib
    - MINT_LINK_PATH: /Users/distiller/mint/bin
  ios:
    macos:
      xcode: 12.5.0
    shell: /bin/bash --login -eo pipefail
    resource_class: large
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install macOS dependencies
        command: |
          # required to workaround issue with protobuf installation, otherwise it complains that this file already exists
          rm "/usr/local/lib/python3.9/site-packages/six.py"
          brew install cmake ccache awscli coreutils mint xcodegen protobuf
          python3 -m pip install requests==2.24.0

          # make tools installed via mint available in PATH
          echo "export PATH=$MINT_LINK_PATH:$PATH" >> $BASH_ENV
    - run:
        name: Install Google Cloud SDK
        command: |
          mkdir /tmp/gcloud && cd /tmp/gcloud
          curl -OL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz
          echo '8fff2401f9a2ac2dee0ef335ac2273a2d6178f2ef8c3632981b80571a513553f *google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz' >> checksumfile
          shasum -a 256 -c checksumfile
          tar zxvf google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz
          ./google-cloud-sdk/install.sh --path-update true --rc-path $BASH_ENV -q
    - restore_cache:
        key: v1/ios-build-gems/{{ checksum "platform/ios/Gemfile.lock" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Run $DIR/../sdk_registry_login.sh
        command: |
          ./scripts/ci/sdk_registry_login.sh
    - run:
        name: Build iphoneos
        command: |
          ./scripts/ci/build_ios.sh iphoneos
    - run:
        name: Build iphonesimulator
        command: |
          ./scripts/ci/build_ios.sh iphonesimulator
    - run:
        name: Build XCFramework
        command: |
          ./platform/ios/scripts/build_xcframework.sh
    - run:
        name: Build Universal Framework
        command: |
          ./platform/ios/scripts/build_universal_framework.sh
    - store_artifacts:
        path: MapboxNavigationNative.xcframework.zip
    - store_artifacts:
        path: MapboxNavigationNative.zip
    - run:
        name: Check security
        command: |
          FRAMEWORK_FOLDER=./build/framework-package/MapboxNavigationNative.framework
          XCFRAMEWORK_FOLDER=./build/xcframework-package/MapboxNavigationNative.xcframework
          SYMBOLS_FOLDER=./scripts/ci/checks/security/allowed_symbols
          DISALLOWED_STRINGS=./scripts/ci/checks/security/disallowed_strings.txt

          python3 ./scripts/ci/checks/security/check-security.py \
            --binary \
              $FRAMEWORK_FOLDER/MapboxNavigationNative \
              $XCFRAMEWORK_FOLDER/ios-arm64/MapboxNavigationNative.framework/MapboxNavigationNative \
              $XCFRAMEWORK_FOLDER/ios-arm64_x86_64-simulator/MapboxNavigationNative.framework/MapboxNavigationNative \
            --allowed-symbols-path \
              $SYMBOLS_FOLDER/allowed_symbols_ios_framework.txt \
              $SYMBOLS_FOLDER/allowed_symbols_ios_xcframework.txt \
              $SYMBOLS_FOLDER/allowed_symbols_ios_xcframework_simulator.txt \
            --disallowed-strings-path $DISALLOWED_STRINGS \
            --platform ios
    - store_artifacts:
        path: ~/allowed_symbols.zip
    - run:
        name: Check that frameworks contain all architectures
        command: |
          set -e
          python3 ./scripts/ci/ios/check_archs.py MapboxNavigationNative.xcframework.zip --archs arm64 --simulator_archs x86_64 arm64
          python3 ./scripts/ci/ios/check_archs.py MapboxNavigationNative.zip --archs arm64 x86_64
    - run:
        name: Binary size metrics
        command: |
          mint install mapbox/ios-binary-size@0.0.3
          ./scripts/metrics/compute-ios-binary-size.sh ./build/xcframework-package/MapboxNavigationNative.xcframework
    - run:
        name: Run iOS integration tests
        no_output_timeout: 30m
        command: |
          if [ $IS_REGULAR_CI == 0 ]; then
            ./scripts/ci/ios/integration_tests.sh
          else
            echo "Skip..."
          fi
    - run:
        name: Copy binaries to SDK Registry S3 bucket
        command: |
          ./scripts/ci/ios/publish-ios.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v1/ios-build-gems/{{ checksum "platform/ios/Gemfile.lock" }}
        paths:
        - platform/ios/vendor/bundle
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: null
    - CCACHE_LOGFILE: /Users/distiller/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/Users/distiller/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - LD_PRELOAD: null
    - HOMEBREW_NO_AUTO_UPDATE: 1
    - HOMEBREW_NO_INSTALL_CLEANUP: 1
    - MINT_PATH: /Users/distiller/mint/lib
    - MINT_LINK_PATH: /Users/distiller/mint/bin
  linux-stdlib-debug:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Build
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_STDLIB_DEBUG_MODE=ON -DMBNN_ENABLE_ADAS=OFF
          make -j${CPU_COUNT} run_tests  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Run tests
        no_output_timeout: 20m
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          cd build
          # timeout should be less than `no_output_timeout` to stop any output earlier than we reach Circle's timeout
          CTEST_PARAMS="--no-tests=error --timeout 90  --resource-spec-file ../test/resource_spec_file.json -j${CPU_COUNT} --output-junit $HOME/test_results.xml"
          ctest $CTEST_PARAMS || ../scripts/flaky.js --ctestParams "$CTEST_PARAMS"
    - store_test_results:
        path: ~/test_results.xml
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  Compute Low-Level Metrics on Firebase traces:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - attach_workspace:
        at: ~/project/
    - restore_cache:
        keys:
        - v2-compute-low-level-metrics-data-filtered-firebase-2020-07-30
    - run:
        command: echo "~/tile-data" > .cache_folder_cache_key
    - restore_cache:
        name: 'Restoring Cache: Tiles'
        keys:
        - v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/
    - run:
        command: aws s3 sync s3://mapbox-navigation-native/navigation-tiles/v2/ ~/tile-data
    - run:
        name: HMM metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder filtered-firebase-2020-07-30 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application mobile \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name hmm-filtered-firebase-2020-07-30 \
            --metric hmm
          popd
    - run:
        name: Offline MM metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder filtered-firebase-2020-07-30 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application mobile \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name offline-mm-filtered-firebase-2020-07-30 \
            --metric offline-mm
          popd
    - run:
        name: Location Predict metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder filtered-firebase-2020-07-30 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application mobile \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name location-predict-filtered-firebase-2020-07-30 \
            --metric location-predict
          popd
    - run:
        name: Teleport metrics
        no_output_timeout: 90m
        command: |
          export MAPBOX_ACCESS_TOKEN=$MAPBOX_ACCESS_TOKEN_GENERIC
          pushd scripts/metrics
          node low-level-metrics.js \
            --s3_folder filtered-firebase-2020-07-30 \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --traces-dir ~/low-level-metrics-traces \
            --config-application mobile \
            --config-platform android \
            --endpoint-host "https://api.mapbox.com" \
            --endpoint-dataset "mapbox/driving" \
            --endpoint-version 2020_12_05-03_00_00 \
            --tile-data ~/tile-data/https://api.mapbox.com/2020_12_05-03_00_00/ \
            --metric-name teleport-filtered-firebase-2020-07-30 \
            --metric teleport
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v2-compute-low-level-metrics-data-filtered-firebase-2020-07-30
        paths:
        - ~/low-level-metrics-traces
    - run:
        command: |
          echo "~/tile-data" > .cache_folder_cache_key
          ls -LR ~/tile-data > .tiles_cache_key
    - save_cache:
        name: 'Saving Cache: Tiles'
        key: v6/tiles-cache/{{ checksum ".cache_folder_cache_key" }}/{{ checksum ".tiles_cache_key" }}
        paths:
        - ~/tile-data
    - run:
        command: aws s3 sync ~/tile-data s3://mapbox-navigation-native/navigation-tiles/v2/
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  ios-native-tests-runner:
    macos:
      xcode: 12.5.0
    shell: /bin/bash --login -eo pipefail
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - run:
        name: Skip for regular CI
        command: |
          if [[ $IS_REGULAR_CI == 1 ]]; then
            echo "CI is regular. Skip..."
            circleci-agent step halt
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install macOS dependencies
        command: |
          # required to workaround issue with protobuf installation, otherwise it complains that this file already exists
          rm "/usr/local/lib/python3.9/site-packages/six.py"
          brew install cmake ccache awscli coreutils mint xcodegen protobuf
          python3 -m pip install requests==2.24.0

          # make tools installed via mint available in PATH
          echo "export PATH=$MINT_LINK_PATH:$PATH" >> $BASH_ENV
    - run:
        name: Install Google Cloud SDK
        command: |
          mkdir /tmp/gcloud && cd /tmp/gcloud
          curl -OL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz
          echo '8fff2401f9a2ac2dee0ef335ac2273a2d6178f2ef8c3632981b80571a513553f *google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz' >> checksumfile
          shasum -a 256 -c checksumfile
          tar zxvf google-cloud-sdk-363.0.0-darwin-x86_64.tar.gz
          ./google-cloud-sdk/install.sh --path-update true --rc-path $BASH_ENV -q
    - restore_cache:
        key: v1/ios-build-gems/{{ checksum "platform/ios/Gemfile.lock" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Run $DIR/../sdk_registry_login.sh
        command: |
          ./scripts/ci/sdk_registry_login.sh
    - run:
        name: Run unit tests on iOS
        no_output_timeout: 30m
        command: |
          mint install ChargePoint/xcparse@2.1.2
          ./scripts/ci/ios/native_unit_tests.sh
    - store_artifacts:
        path: firebase_report.zip
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v1/ios-build-gems/{{ checksum "platform/ios/Gemfile.lock" }}
        paths:
        - platform/ios/vendor/bundle
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: null
    - CCACHE_LOGFILE: /Users/distiller/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/Users/distiller/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - LD_PRELOAD: null
    - HOMEBREW_NO_AUTO_UPDATE: 1
    - HOMEBREW_NO_INSTALL_CLEANUP: 1
    - MINT_PATH: /Users/distiller/mint/lib
    - MINT_LINK_PATH: /Users/distiller/mint/bin
  run-adasis-poc-on-linux:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADAS=ON
          make -j${CPU_COUNT} Adasis_PoC_Demo  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Adasis PoC
        command: |
          pushd build
          set +e
          ADASIS_POC_RES=$(tools/Adasis_PoC_Demo/Adasis_PoC_Demo ../test/fixtures/adasis/mahwah-route.kml --tiles ../test/fixtures/tiles/api.mapbox.com/ --port 8111 --endpointVersion 2021_07_14-03_00_00 --enhancedFile ../test/fixtures/adasis/adasis_poc_shrinked.pbf.gz --visited_edges_output adasis_poc_run.geojson)
          echo "$ADASIS_POC_RES" | tee adasis_poc_run_log.txt | grep "Edges coverage: found " | awk '{if($4+1>1000){print "Success"}else{exit 1}}'
          EXIT_CODE=$?
          tar -zcvf adasis_poc_output.tar.gz adasis_poc_run_log.txt adasis_poc_run.geojson adasis_output_messages/*
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/adasis_poc_output.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  compute-low-level-metrics-route-matcher:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-gcc-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - attach_workspace:
        at: ~/project/
    - run:
        name: Route Matcher metrics
        no_output_timeout: 30m
        command: |
          pushd scripts/metrics
          node low-level-metrics.js \
            --tool ../../build/tools/low_level_metrics/low_level_metrics \
            --tile-data ~/project/test/fixtures/tiles/api-routing-tiles-here-staging.tilestream.net/2020_03_07-03_00_00/ \
            --metric route_matcher
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  run-functional-tests-asan-ubsan-nightly:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=0
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: Build all
        command: |
          CPU_COUNT=$(getconf _NPROCESSORS_ONLN)
          echo "Building on ${CPU_COUNT} cores."
          mkdir -p build
          pushd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DMBNN_ENABLE_ADDRESS_SANITIZER=ON -DMBNN_ENABLE_UNDEFINED_BEHAVIOR_SANITIZER=ON
          make -j${CPU_COUNT} functional_test_navigation  | while read line ; do echo "$(date +"%T") > $line" ; done ;
          popd
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - run:
        name: Run Functional Tests
        command: |
          pushd build
          set +e
          if [[ "OFF" == "ON" ]]; then
              TEST_RES=$(NN_FUNC_TESTS_RAND_SEED=4243 test/functional/functional_test_navigation --verbose)
          else
              TEST_RES=$(test/functional/functional_test_navigation --verbose)
          fi
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ] ; then
            echo "$TEST_RES" | tee fail_log.txt | grep "\[ Failure \] History saved to" | awk '{$1=$2=$3=$4=$5=$6=""; print $0}' | xargs tar -zcvf func_test_traces.tar.gz fail_log.txt
          fi
          echo "$TEST_RES"
          set -e
          popd
          exit $EXIT_CODE
    - store_artifacts:
        path: build/func_test_traces.tar.gz
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
  copy-firebase-traces-to-s3:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:linux-clang-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: small
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - restore_cache:
        key: v1/copy-firebase-traces-to-s3/ios/
    - restore_cache:
        key: v1/copy-firebase-traces-to-s3/android/
    - restore_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway/
    - restore_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway-nav/
    - restore_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway-dpd/
    - run:
        name: Copy Firebase traces to S3
        command: ./scripts/copy-traces-from-firebase-to-s3.sh
    - run:
        name: Generate cache keys
        command: |
          ls -LR ~/firebase-ios > .ios_traces_key
          ls -LR ~/firebase-android > .android_traces_key
          ls -LR ~/firebase-straightaway > .straightaway_traces_key
          ls -LR ~/firebase-straightaway-nav > .straightaway_nav_traces_key
          ls -LR ~/firebase-straightaway-dpd > .straightaway_dpd_traces_key
    - save_cache:
        key: v1/copy-firebase-traces-to-s3/ios/{{ checksum ".ios_traces_key" }}/
        paths:
        - ~/firebase-ios
    - save_cache:
        key: v1/copy-firebase-traces-to-s3/android/{{ checksum ".android_traces_key" }}/
        paths:
        - ~/firebase-android
    - save_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway/{{ checksum ".straightaway_traces_key" }}/
        paths:
        - ~/firebase-straightaway
    - save_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway-nav/{{ checksum ".straightaway_nav_traces_key" }}/
        paths:
        - ~/firebase-straightaway-nav
    - save_cache:
        key: v1/copy-firebase-traces-to-s3/straightaway-dpd/{{ checksum ".straightaway_dpd_traces_key" }}/
        paths:
        - ~/firebase-straightaway-dpd
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
  android:
    docker:
    - image: 234858372212.dkr.ecr.us-east-1.amazonaws.com/nav-native/ci:android-20220209r51
      aws_auth:
        aws_access_key_id: $ECR_AWS_ACCESS_KEY_ID
        aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    resource_class: xlarge
    steps:
    - checkout
    - run:
        name: Filter job by commit message
        command: |
          python3 -m pip install requests==2.24.0 pyyaml==6.0.0
          python3 ./scripts/ci/ci-circleci-filter-job.py
    - run:
        name: Check if CI is non-regular
        command: |
          set +e
          CHANGES_IN_COMMON_SDK=$(git diff --quiet HEAD master -- thirdparty/sdk-common.cmake; echo $?)
          CHANGES_IN_VALHALLA=$(git diff --quiet HEAD master -- thirdparty/valhalla.cmake; echo $?)
          set -e
          if [[
            $CHANGES_IN_COMMON_SDK == 1 || \
            $CHANGES_IN_VALHALLA == 1 || \
            "$CIRCLE_TAG" != "" || \
            "$CIRCLE_BRANCH" == "master" || \
            "$(git log -1)" == *"full_ci"* \
          ]]; then
            echo 'export IS_REGULAR_CI=0' >> $BASH_ENV
            echo "CI is non-regular."
          else
            echo 'export IS_REGULAR_CI=1' >> $BASH_ENV
            echo "CI is regular."
          fi
    - run:
        command: cmake --version
    - run:
        command: cat $ANDROID_HOME/ndk-bundle/source.properties
    - restore_cache:
        name: 'Restoring Cache: misc.'
        keys:
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: ccache'
        keys:
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/
        - v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/master
    - restore_cache:
        name: 'Restoring Cache: FetchContentShared'
        keys:
        - v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
    - restore_cache:
        keys:
        - v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        - v1/gradle
    - run:
        name: Install mbx-ci
        command: |
          # TODO: can be moved to Docker base image for Linux
          MBXCI_VERSION=1.7.0
          if [[ $(uname) == 'Linux' ]]; then
            wget -O mbx-ci https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-linux-amd64
            echo "83df2b9e9a3376e1b6b0fadd6750ccffe1a15409f8a302351c4c1c9cbac756df  mbx-ci" | sha256sum -c
          elif [[ $(uname) == 'Darwin' ]]; then
            curl -s https://mapbox-release-engineering.s3.amazonaws.com/mbx-ci/v${MBXCI_VERSION}/mbx-ci-darwin-amd64 > mbx-ci
            echo "f059d6f90b9afc8e5600aec588b53f7c1facc78555cb5ef2817dd31362e3995c  mbx-ci" | shasum -c -a 256
          else
            >&2 echo "Unknown platform"
            exit 1
          fi
          chmod 755 ./mbx-ci
          mv ./mbx-ci /usr/local/bin/mbx-ci
    - run:
        name: Obtain AWS credentials
        command: mbx-ci aws setup
    - run:
        name: Configure CCache
        command: |
          ccache --max-size=3G || true
          ccache --zero-stats || true
          ccache --show-stats || true
          ccache --evict-older-than 7d || true
    - run:
        name: Generate LFS cache key
        command: |
          # uses list of lfs files as LFS cache key
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-cache-key
    - restore_cache:
        name: 'Restoring Cache: LFS'
        keys:
        - v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        - v1/{{ arch }}/lfs-
    - add_ssh_keys:
        fingerprints:
        - 3b:cd:47:bf:57:9c:e5:36:b0:4d:5f:12:5e:d3:b3:3e
    - run:
        name: Prepare
        command: |
          git submodule sync
          git submodule update --recursive --init --depth 1
          git gc
          git lfs pull
    - run:
        name: npm install
        command: |
          echo "Requesting NPM token..."
          mbx-ci npm token --write-file
          echo "Got npm token..."
          npm install
    - run:
        name: Workaround for `#4533`
        command: mkdir build && cd build && cmake ..
    - run:
        name: Assemble
        no_output_timeout: 45m
        command: |
          cd  platform/android
          # will also assemble SDK itself(because it is dependency of app)
          ./gradlew --warning-mode all --info :instrumentation-tests-app:assembleRelease :instrumentation-tests-app:assembleReleaseAndroidTest --profile
    - run:
        command: zip -r gradle-profile.zip platform/android/build/reports/profile
    - store_artifacts:
        path: gradle-profile.zip
    - run:
        name: Binary size metrics
        command: ./scripts/metrics/compute-android-binary-size.sh ./platform/android/sdk/build/intermediates/stripped_native_libs/release/out/lib/
    - run:
        name: Check security
        command: |
          LIB=./platform/android/instrumentation-tests-app/build/intermediates/stripped_native_libs/release/out/lib/
          SYMBOLS_FOLDER=./scripts/ci/checks/security/allowed_symbols
          DISALLOWED_STRINGS=./scripts/ci/checks/security/disallowed_strings.txt

          python3 ./scripts/ci/checks/security/check-security.py \
              --binary \
                $LIB/arm64-v8a/libnavigator-android.so \
                $LIB/armeabi-v7a/libnavigator-android.so \
                $LIB/x86/libnavigator-android.so \
                $LIB/x86_64/libnavigator-android.so \
              --allowed-symbols-path \
                $SYMBOLS_FOLDER/allowed_symbols_android_arm64-v8a.txt \
                $SYMBOLS_FOLDER/allowed_symbols_android_armeabi-v7a.txt \
                $SYMBOLS_FOLDER/allowed_symbols_android_x86.txt \
                $SYMBOLS_FOLDER/allowed_symbols_android_x86_64.txt \
              --disallowed-strings-path $DISALLOWED_STRINGS \
              --platform android
    - store_artifacts:
        path: ~/allowed_symbols.zip
    - run:
        name: Run instrumentation tests on Firebase
        no_output_timeout: 30m
        command: |
          if [ $IS_REGULAR_CI == 0 ]; then
            ./scripts/ci/android/run_firebase_instrumentation_tests.sh \
              ./platform/android/instrumentation-tests-app/build/outputs/apk/release/instrumentation-tests-app-release.apk \
              ./platform/android/instrumentation-tests-app/build/outputs/apk/androidTest/release/instrumentation-tests-app-release-androidTest.apk
          else
            echo "Skip..."
          fi
    - run:
        name: Run Robo tests on Firebase
        no_output_timeout: 30m
        command: |
          if [ $IS_REGULAR_CI == 0 ]; then
            ./scripts/ci/android/run_firebase_robo_tests.sh \
              ./platform/android/instrumentation-tests-app/build/outputs/apk/release/instrumentation-tests-app-release.apk
          else
            echo "Skip..."
          fi
    - run:
        name: Publish
        command: |
          ./scripts/ci/android/publish-android.sh
    - run:
        name: Show CCache statistics
        command: |
          ccache --show-stats || true
          ccache --show-compression || true
    - store_artifacts:
        path: /root/ccache.log
    - save_cache:
        name: 'Saving Cache: misc.'
        when: always
        key: v19/deps/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - thirdparty/binaries
        - downloads
        - .git/modules
        - node_modules
        - /Users/distiller/Library/Caches/Homebrew
        - ~/.cache/pip
        - .venvs
        - ~/Library/Caches/pip
        - /Users/distiller/mint
    - save_cache:
        name: 'Saving Cache: ccache'
        when: always
        key: v14/ccache/{{ .Environment.CIRCLE_JOB }}/{{ arch }}/{{ .Branch }}/{{ .Revision }}
        paths:
        - /root/.ccache
        - ~/.ccache
        - /Users/distiller/Library/Caches/ccache
        - /tmp/lto
    - save_cache:
        name: 'Saving Cache: LFS'
        when: always
        key: v1/{{ arch }}/lfs-{{ checksum ".lfs-cache-key" }}
        paths:
        - .git/lfs
    - save_cache:
        name: 'Saving Cache: FetchContentShared'
        when: always
        key: v4/fetchcontentshared/{{ arch }}/{{ checksum "~/project/cmake-deps" }}
        paths:
        - ~/project/.fetchcontentshared
    - save_cache:
        key: v1/gradle/{{ checksum "platform/android/gradle/dependencies.gradle" }}/{{ checksum "platform/android/build.gradle" }}/{{ checksum "platform/android/sdk/build.gradle" }}/{{ checksum "platform/android/instrumentation-tests-app/build.gradle" }}/{{ checksum "platform/android/native-tests-app/build.gradle" }}/{{ checksum "platform/android/gradle/wrapper/gradle-wrapper.properties" }}
        paths:
        - /root/.gradle
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: ^master$
          SLACK_PARAM_CHANNEL: '#nav-native-updates'
          SLACK_PARAM_CUSTOM: ''
          SLACK_PARAM_EVENT: fail
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: basic_fail_1
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
    - run:
        name: Max memory usage in bytes
        command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
        when: always
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    - JVM_OPTS: -Xmx3200m
    - GRADLE_OPTS: -Xmx4096m -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
  notify-slack-successful-release:
    docker:
    - image: cimg/base:stable
    environment:
    - CCACHE_COMPRESSLEVEL: 5
    - CTEST_OUTPUT_ON_FAILURE: 1
    - GIT_LFS_SKIP_SMUDGE: 1
    - LIBSYSCONFCPUS: 8
    - CCACHE_LOGFILE: /root/ccache.log
    - AWS_SDK_LOAD_CONFIG: true
    - UBSAN_OPTIONS: halt_on_error=1
    - TSAN_OPTIONS: halt_on_error=1:suppressions=/root/project/tsan-suppressions.txt
    - ASAN_OPTIONS: halt_on_error=1:suppressions=/root/project/asan-suppressions.txt:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1:detect_invalid_pointer_pairs=2:detect_leaks=1
    resource_class: small
    steps:
    - run:
        name: Prepare message body
        command: |
          SLACK_MESSAGE_BODY=":rocket_intensifies::rocket_intensifies::rocket_intensifies:"
          SLACK_MESSAGE_BODY+=" *<https://github.com/mapbox/mapbox-navigation-native/releases/tag/${CIRCLE_TAG}|${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG}> release is out!*"
          SLACK_MESSAGE_BODY+=" :rocket_intensifies::rocket_intensifies::rocket_intensifies:"
          SLACK_MESSAGE_BODY+="\nGratitude to: *${CIRCLE_USERNAME}*"
          SLACK_MESSAGE_BODY+="\nMentions:"
          TEAMS=(
            ST0G5FGF6 # @driver-apps
            SP0T257KM # @navnative
            S8FAMDJF9 # @navigation-android
            S8E0SRMRV # @navigation-ios
          )
          for TEAM in ${TEAMS[@]}
          do
            SLACK_MESSAGE_BODY+=" <!subteam^${TEAM}>"
          done

          echo "$SLACK_MESSAGE_BODY"
          echo "SLACK_MESSAGE_BODY='$SLACK_MESSAGE_BODY'" >> $BASH_ENV
    - run:
        command: |
          echo 'export CCI_STATUS="fail"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (FAIL)
        when: on_fail
    - run:
        command: |
          echo 'export CCI_STATUS="pass"' > /tmp/SLACK_JOB_STATUS
        name: Slack - Detecting Job Status (PASS)
        when: on_success
    - run:
        command: |
          BuildMessageBody() {
              # Send message
              #   If sending message, default to custom template,
              #   if none is supplied, check for a pre-selected template value.
              #   If none, error.
              if [ -n "${SLACK_PARAM_CUSTOM:-}" ]; then
                  ModifyCustomTemplate
                  # shellcheck disable=SC2016
                  CUSTOM_BODY_MODIFIED=$(echo "$CUSTOM_BODY_MODIFIED" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed 's/`/\\`/g')
                  T2=$(eval echo \""$CUSTOM_BODY_MODIFIED"\")
              elif [ -n "${SLACK_PARAM_TEMPLATE:-}" ]; then
                  TEMPLATE="\$$SLACK_PARAM_TEMPLATE"
                  T1=$(eval echo "$TEMPLATE" | sed 's/"/\\"/g')
                  T2=$(eval echo \""$T1"\")
              else
                  echo "Error: No message template selected."
                  echo "Select either a custom template or one of the pre-included ones via the 'custom' or 'template' parameters."
                  exit 1
              fi
              # Insert the default channel. THIS IS TEMPORARY
              T2=$(echo "$T2" | jq ". + {\"channel\": \"$SLACK_DEFAULT_CHANNEL\"}")
              SLACK_MSG_BODY=$T2
          }


          PostToSlack() {
              # Post once per channel listed by the channel parameter
              #    The channel must be modified in SLACK_MSG_BODY

              # shellcheck disable=SC2001
              for i in $(eval echo \""$SLACK_PARAM_CHANNEL"\" | sed "s/,/ /g")
              do
                  echo "Sending to Slack Channel: $i"
                  SLACK_MSG_BODY=$(echo "$SLACK_MSG_BODY" | jq --arg channel "$i" '.channel = $channel')
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  SLACK_ERROR_MSG=$(echo "$SLACK_SENT_RESPONSE" | jq '.error')
                  if [ ! "$SLACK_ERROR_MSG" = "null" ]; then
                      echo "Slack API returned an error message:"
                      echo "$SLACK_ERROR_MSG"
                      echo
                      echo
                      echo "View the Setup Guide: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                      if [ "$SLACK_PARAM_IGNORE_ERRORS" = "0" ]; then
                          exit 1
                      fi
                  fi
              done
          }

          ModifyCustomTemplate() {
              # Inserts the required "text" field to the custom json template from block kit builder.
              if [ "$(echo "$SLACK_PARAM_CUSTOM" | jq '.text')" = "null" ]; then
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '. + {"text": ""}')
              else
                  # In case the text field was set manually.
                  CUSTOM_BODY_MODIFIED=$(echo "$SLACK_PARAM_CUSTOM" | jq '.')
              fi
          }

          InstallJq() {
              if uname -a | grep Darwin > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: MacOS"
                  command -v jq >/dev/null 2>&1 || HOMEBREW_NO_AUTO_UPDATE=1 brew install jq --quiet
                  return $?

              elif cat /etc/issue | grep Debian > /dev/null 2>&1 || cat /etc/issue | grep Ubuntu > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Debian"
                  if [ "$(id -u)" = 0 ]; then export SUDO=""; else # Check if we're root
                      export SUDO="sudo";
                  fi
                  command -v jq >/dev/null 2>&1 || { $SUDO apt -qq update && $SUDO apt -qq install -y jq; }
                  return $?

              elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
                  echo "Checking For JQ + CURL: Alpine"
                  command -v curl >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: CURL is required. Please install."; exit 1; }
                  command -v jq >/dev/null 2>&1 || { echo >&2 "SLACK ORB ERROR: JQ is required. Please install"; exit 1; }
                  return $?
              fi
          }

          FilterBy() {
              if [ -z "$1" ] || [ -z "$2" ]; then
                return
              fi

              # If any pattern supplied matches the current branch or the current tag, proceed; otherwise, exit with message.
              FLAG_MATCHES_FILTER="false"
              for i in $(echo "$1" | sed "s/,/ /g")
              do
                  if echo "$2" | grep -Eq "^${i}$"; then
                      FLAG_MATCHES_FILTER="true"
                      break
                  fi
              done
              if [ "$FLAG_MATCHES_FILTER" = "false" ]; then
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "Current reference \"$2\" does not match any matching parameter"
                  echo "Current matching pattern: $1"
                  exit 0
              fi
          }

          CheckEnvVars() {
              if [ -n "${SLACK_WEBHOOK:-}" ]; then
                  echo "It appears you have a Slack Webhook token present in this job."
                  echo "Please note, Webhooks are no longer used for the Slack Orb (v4 +)."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
              fi
              if [ -z "${SLACK_ACCESS_TOKEN:-}" ]; then
                  echo "In order to use the Slack Orb (v4 +), an OAuth token must be present via the SLACK_ACCESS_TOKEN environment variable."
                  echo "Follow the setup guide available in the wiki: https://github.com/CircleCI-Public/slack-orb/wiki/Setup"
                  exit 1
              fi
              # If no channel is provided, quit with error
              if [ -z "${SLACK_PARAM_CHANNEL:-}" ]; then
                 echo "No channel was provided. Enter value for SLACK_DEFAULT_CHANNEL env var, or channel parameter"
                 exit 1
              fi
          }

          ShouldPost() {
              if [ "$CCI_STATUS" = "$SLACK_PARAM_EVENT" ] || [ "$SLACK_PARAM_EVENT" = "always" ]; then
                  # In the event the Slack notification would be sent, first ensure it is allowed to trigger
                  # on this branch or this tag.
                  FilterBy "$SLACK_PARAM_BRANCHPATTERN" "${CIRCLE_BRANCH:-}"
                  FilterBy "$SLACK_PARAM_TAGPATTERN" "${CIRCLE_TAG:-}"

                  echo "Posting Status"
              else
                  # dont send message.
                  echo "NO SLACK ALERT"
                  echo
                  echo "This command is set to send an alert on: $SLACK_PARAM_EVENT"
                  echo "Current status: ${CCI_STATUS}"
                  exit 0
              fi
          }

          # Will not run if sourced from another script.
          # This is done so this script may be tested.
          ORB_TEST_ENV="bats-core"
          if [ "${0#*$ORB_TEST_ENV}" = "$0" ]; then
              CheckEnvVars
              . "/tmp/SLACK_JOB_STATUS"
              ShouldPost
              InstallJq
              BuildMessageBody
              PostToSlack

          fi
        environment:
          SLACK_PARAM_BRANCHPATTERN: .+
          SLACK_PARAM_CHANNEL: '#nav-native'
          SLACK_PARAM_CUSTOM: |
            {
              "attachments":
              [
                {
                  "text": "${SLACK_MESSAGE_BODY}",
                  "color": "#333333"
                }
              ]
            }
          SLACK_PARAM_EVENT: always
          SLACK_PARAM_IGNORE_ERRORS: true
          SLACK_PARAM_MENTIONS: ''
          SLACK_PARAM_TAGPATTERN: .+
          SLACK_PARAM_TEMPLATE: ''
          basic_fail_1: "{\n\t\"text\": \"CircleCI job failed.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Failed. :red_circle:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_on_hold_1: "{\n\t\"text\": \"CircleCI job on hold, waiting for approval.\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"ON HOLD - Awaiting Approval :raised_hand:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\\\n$CIRCLE_BRANCH\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\\\n$CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Workflow\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          basic_success_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Job Succeeded. :white_check_mark:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Job*: ${CIRCLE_JOB}\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\n $CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Branch*:\\n $CIRCLE_BRANCH\"\n                },\n                {\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Commit*:\\n $CIRCLE_SHA1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Author*:\\n $CIRCLE_USERNAME\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Mentions*:\\\\n$SLACK_PARAM_MENTIONS\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
          success_tagged_deploy_1: "{\n\t\"text\": \"CircleCI job succeeded!\",\n\t\"blocks\": [\n\t\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Deployment Successful! :tada:\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"section\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Project*:\\\\n$CIRCLE_PROJECT_REPONAME\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*When*:\\\\n$(date +'%m/%d/%Y %T')\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\t\t\"text\": \"*Tag*:\\\\n$CIRCLE_TAG\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"accessory\": {\n\t\t\t\t\"type\": \"image\",\n\t\t\t\t\"image_url\": \"https://assets.brandfolder.com/otz5mn-bw4j2w-6jzqo8/original/circle-logo-badge-black.png\",\n\t\t\t\t\"alt_text\": \"CircleCI logo\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"actions\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"button\",\n\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\t\t\"text\": \"View Job\"\n\t\t\t\t\t},\n\t\t\t\t\t\"url\": \"${CIRCLE_BUILD_URL}\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}\n"
        name: Slack - Sending Notification
        when: always
workflows:
  on-call-ticket:
    jobs:
    - create-on-call-ticket:
        context:
        - ECR Read Permissions
    triggers:
    - schedule:
        cron: 0 3 * * 1
        filters:
          branches:
            only:
            - master
  nightly:
    jobs:
    - copy-firebase-traces-to-s3:
        context:
        - ECR Read Permissions
    - run-functional-tests-asan-ubsan-nightly:
        context:
        - ECR Read Permissions
    - run-functional-tests-tsan-nightly:
        context:
        - ECR Read Permissions
    - run-adasis-poc-on-linux-nightly:
        context:
        - ECR Read Permissions
    - compute-high-level-metrics-zenrin:
        requires:
        - linux
        context:
        - ECR Read Permissions
    - compute-high-level-metrics-here:
        requires:
        - linux
        context:
        - ECR Read Permissions
    - compute-high-level-metrics-osm:
        requires:
        - linux
        context:
        - ECR Read Permissions
    - compute-high-level-metrics-osm-any:
        requires:
        - linux
        context:
        - ECR Read Permissions
    - publish-ios
    - linux:
        context:
        - ECR Read Permissions
    - linux-nightly:
        context:
        - ECR Read Permissions
    - linux-system-tests-mem:
        requires:
        - linux-nightly
        context:
        - ECR Read Permissions
    - linux-asan-ubsan-nightly:
        context:
        - ECR Read Permissions
    - linux-system-tests-asan-ubsan:
        requires:
        - linux-asan-ubsan-nightly
        context:
        - ECR Read Permissions
    - linux-tsan-nightly:
        context:
        - ECR Read Permissions
    - linux-system-tests-tsan:
        requires:
        - linux-tsan-nightly
        context:
        - ECR Read Permissions
    triggers:
    - schedule:
        cron: 0 0 * * 1-5
        filters:
          branches:
            only:
            - master
  default:
    jobs:
    - check-if-pr-is-ready:
        filters:
          tags:
            only: /.*/
    - lint:
        filters:
          tags:
            only: /.*/
        context:
        - ECR Read Permissions
    - static-analysis:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - run-functional-tests-asan-ubsan:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - run-functional-tests-tsan:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - linux:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - compute-low-level-metrics-route-matcher:
        requires:
        - linux
        context:
        - ECR Read Permissions
    - Compute High-Level Metrics:
        filters:
          tags:
            only: /.*/
        requires:
        - linux
        context:
        - ECR Read Permissions
    - Compute Low-Level Metrics on Firebase traces:
        filters:
          tags:
            only: /.*/
        requires:
        - linux
        context:
        - ECR Read Permissions
    - Compute Low-Level Metrics on BMW traces:
        filters:
          tags:
            only: /.*/
        requires:
        - linux
        context:
        - ECR Read Permissions
    - linux-gcc-tests:
        filters:
          tags:
            only: /.*/
        requires:
        - linux
        context:
        - ECR Read Permissions
    - linux-coverage:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - linux-32bit:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - linux-onboard-router-tests:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - linux-asan-ubsan:
        filters:
          tags:
            only: /.*/
        context:
        - ECR Read Permissions
    - linux-stdlib-debug:
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - linux-tsan-cpp17:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - macos-tsan:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
    - ios:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
    - android:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - sdk-registry-create-pr-and-wait-for-approval:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /.*/
        requires:
        - android
        - ios
        context:
        - ECR Read Permissions
    - publish-ios:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /.*/
        requires:
        - sdk-registry-create-pr-and-wait-for-approval
    - notify-slack-successful-release:
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /.*/
        requires:
        - publish-ios
        context:
        - ECR Read Permissions
    - android-native-tests-runner:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - ios-native-tests-runner:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
    - dogfood42-ios:
        filters:
          tags:
            ignore: /.*/
        requires:
        - check-if-pr-is-ready
    - dogfood42-android:
        filters:
          tags:
            ignore: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
    - run-adasis-poc-on-linux:
        filters:
          tags:
            only: /.*/
        requires:
        - check-if-pr-is-ready
        context:
        - ECR Read Permissions
  version: 2
