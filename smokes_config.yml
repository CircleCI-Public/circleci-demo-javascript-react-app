version: 2.1
orbs:
  slack: circleci/slack@3.4.2
  browser-tools: circleci/browser-tools@1.1.3

parameters:
  run_deploy:
    type: boolean
    default: false
  test_path:
    description: "Path to test folder, or specific test file"
    type: string
    default: "\"./tests/**/*.js\""

executors:
  docker_node:
    docker:
      - image: cimg/node:current-browsers
    working_directory: ~/regression-qaa/

commands:
  env_setup:
    description: "Set up the test environment"
    steps:
      - checkout
      - restore_cache:
          key: v1-node-modules-{{ checksum "package-lock.json" }}
      - run: npm install --progress=false
      - save_cache:
          key: v1-node-modules-{{ checksum "package-lock.json" }}
          paths: node_modules

  install_local_browsers:
      description: Install Chrome and Firefox
      parameters:
        chrome_version:
          type: string
          default: "latest"
      steps:
          - browser-tools/install-chrome:
              chrome-version: << parameters.chrome_version >>

  run_regressions:
    description: "Run the regression tests"
    parameters:
      test_path:
        type: string
        default: << pipeline.parameters.test_path >>
    steps:
      - run:
          name: Run Smokes Regression Tests
          description: Set up the test environment, then run regressions
          command: |
            export TESTPATH=$(circleci tests glob << parameters.test_path >> | circleci tests split --split-by=timings)
            printf "\nTarget Env:\nstaging\n"
            printf "\nTest files:\n\n"

            ./scripts/test --smokes -e staging

  upload_results:
    description: "Upload any test artifacts"
    steps:
      - store_test_results:
          path: ./artifacts/test-results
      - when:
          condition: on_fail
          steps:
            - store_artifacts:
                path: ./artifacts

  send_slack_status:
    description: "Send a notification to Slack"
    parameters:
      environment:
        type: string
        default: staging
      fail_only:
        type: boolean
        default: false
      slack_channel:
        type: string
        default: ${SLACK_DEFAULT_CHANNEL}
    steps:
        - slack/status:
            webhook: << parameters.slack_channel >>
            failure_message: The Smoke tests have failed on << parameters.environment >>, triggered by ${CIRCLE_USERNAME}
            success_message: The Smoke tests have passed on << parameters.environment >>, triggered by ${CIRCLE_USERNAME}
            only_for_branches: master
            fail_only: << parameters.fail_only >>

jobs:
  smokes_build:
    circleci_ip_ranges: true
    executor: docker_node
    parameters:
      parallelism:
        type: integer
        default: 10
      path:
        type: string
        default: << pipeline.parameters.test_path >>
    parallelism: << parameters.parallelism >>
    steps:
      - env_setup
      - install_local_browsers
      - run_regressions:
          test_path: << parameters.path >>
      - upload_results
        # TODO: Currently notifies pd-deployment for EVERY container that fails
        # https://github.com/CircleCI-Public/slack-orb/issues/73
        # https://ideas.circleci.com/ideas/CCI-I-344
      - when:
          condition: << pipeline.parameters.run_deploy >>
          steps:
            - send_slack_status:
                slack_channel: 
                fail_only: true
      - when:
          condition:
            equal: [ "prod", "staging" ]
          steps:
            - send_slack_status:
                slack_channel: 
                environment: production
                fail_only: true

  notify_slack:
    parallelism: 1
    executor: docker_node
    parameters:
      channel:
        type: string
        default: ${SLACK_DEFAULT_CHANNEL}
      environment:
        type: string
        default: staging
    steps:
        - send_slack_status:
            environment: << parameters.environment >>
            slack_channel: << parameters.channel >>

workflows:
  staging_smokes_run:
    unless: << pipeline.parameters.run_deploy >>
    jobs:
      - smokes_build
      - notify_slack:
          requires:
            - smokes_build
  deployment_smokes_run:
    when: << pipeline.parameters.run_deploy >>
    jobs:
      - smokes_build
      - notify_slack:
          channel: 
          requires:
            - smokes_build
