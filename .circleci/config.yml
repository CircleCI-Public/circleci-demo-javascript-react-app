version: 2.1

orbs:
  node: circleci/node@5.0.2
  continuation: circleci/continuation@0.1.2

setup: true

parameters:
  workflow:
    type: string
    default: ""

jobs:
  test-workflow-continuation-config:
    docker:
      - image: node/default 
    resource_class: small
    
    steps:
      - checkout
      - when:
          condition:
            equal: [ << pipeline.trigger_source >>, scheduled_pipeline ]    
          steps:
            - run:
                command: |
                  echo "hi"
                  - run:
                      name: Using the schedule name to trigger
                      command: echo "<< pipeline.schedule.name >>" >> $WORKFLOW_FILE
      - unless:
          condition:
            equal: [ << pipeline.trigger_source >>, scheduled_pipeline ]
          steps:
            - run:
                name: Generate the list of workflows to run
                command: |
                  export MANUAL_WORKFLOW="<< pipeline.parameters.workflow >>"
                  ./.circleci/scripts/determine_workflows.sh
                  ./.circleci/scripts/snub_github_checks.sh
      - run:
          name: Compile all workflows into a single YAML file
          command: ./.circleci/scripts/compile_yml.sh
      - run:
          name: Generate parameters passed to the next level
          command: echo "{}" > /tmp/custom-pipeline-parameters.json
      - store_artifacts:
          path: "workflows"
      - store_artifacts:
          path: "compiled.yml"
      - continuation/continue:
          configuration_path: "compiled.yml"
          parameters: /tmp/custom-pipeline-parameters.json

workflows:
  workflor-for-test-workflow-continuation-config:
    jobs: 
      - test-workflow-continuation-config

# version: 2.1

# setup: true

# parameters:
#   workflow:
#     type: string
#     default: ""

# executors:
#   whisper-system:
#     # docker:
#     #   - image: us.gcr.io/whisper-cloud/whisper-system-base:0.4.25
#     #     auth:
#     #       username: _json_key
#     #       password: $GCLOUD_SERVICE_KEY
#     docker:
#       - image: 247451755856.dkr.ecr.us-east-1.amazonaws.com/whisper-system-gen1:0.4.25
#         aws_auth:
#           aws_access_key_id: $AWS_ECR_ACCESS_KEY_ID
#           aws_secret_access_key: $AWS_ECR_SECRET_ACCESS_KEY
#     working_directory: /root/project
#     environment:
#       WHISPER_SYSTEM_ROOT: /root/project

# orbs:
#   continuation: circleci/continuation@0.1.2
#   github-cli: circleci/github-cli@1.0.4
#   circleci-cli: circleci/circleci-cli@0.1.9

# commands:
#   install-dependencies:
#     steps:
#       - github-cli/setup
#       - run:
#           name: Install python packages
#           command: pip install -r .circleci/requirements.txt
#       - run:
#           name: Install ytt
#           command: ./.circleci/scripts/install_ytt.sh

# jobs:
#   studio-common-pytest:
#     executor: whisper-system
#     resource_class: large
#     environment:
#       COMMON_VENV: whispy/venvs/studiocommon
#     steps:
#       - checkout
#       - github-cli/setup
#       - restore_cache:
#           keys:
#             - whispy-venvs-studiocommon-{{ checksum "whispy/studio-common/setup.py" }}-{{ checksum "whispy/studio-common/requirements.txt" }}
#       - run:
#           name: Install studio-common
#           command: |
#             if ! [ -d $COMMON_VENV ]; then
#               mkdir -p whispy/venvs
#               python -m venv $COMMON_VENV
#               source $COMMON_VENV/bin/activate
#               source .pysetupversions
#               python -m pip install \
#                   pip==$_PIP_VERSION \
#                   pip-tools==$_PIPTOOLS_VERSION \
#                   setuptools==$_SETUPTOOLS_VERSION \
#                   wheel==$_WHEEL_VERSION
#               pushd whispy/studio-common/
#               pip-sync requirements.txt
#               popd
#             fi
#       - save_cache:
#           key: whispy-venvs-studiocommon-{{ checksum "whispy/studio-common/setup.py" }}-{{ checksum "whispy/studio-common/requirements.txt" }}
#           paths:
#             - ~/project/whispy/venvs/studiocommon
#       - run:
#           name: Run pytest
#           command: |
#             source .circleci/scripts/utils.sh
#             if list-changed-files | grep "whispy/studio-common" ; then
#               source $COMMON_VENV/bin/activate
#               pytest whispy/studio-common/whisper/studio/common
#             else
#               echo "whispy/studio-common didn't change => skipping tests"
#             fi

#   gen-agnostic-tests:
#     executor: whisper-system
#     resource_class: small
#     steps:
#       - checkout
#       - circleci-cli/install
#       - install-dependencies
#       - run:
#           name: Test all possibly generated YAMLs
#           command: python .circleci/scripts/test.py
#       - run:
#           name: Test whisper_version
#           command: |
#             ./libraries/gen2/whisper_version/whisper_version_test.sh
#       - run:
#           name: Figure out the west config hash
#           command: find firmware -name "west.yml" -exec md5sum {} \; > WEST_CHECKSUM
#       - restore_cache:
#           keys:
#             - firmware-python-reqs-v2-{{ checksum "WEST_CHECKSUM" }}
#       - run:
#           name: Pull in fw dependencies
#           command: |
#             GIT_LFS_SKIP_SMUDGE=1 && git submodule update --init --recursive "libraries/gen2/whisper_protobuf"
#             if [ -d DEPS_CACHE ]; then
#               mv DEPS_CACHE .dependencies
#             else
#               ./firmware/get_build_deps.sh
#               apt-get update && apt-get install -y rsync
#               REQ_FILES=($(find .dependencies -name "requirements*.txt" | sed "s#.dependencies/#.dependencies/./#g"))
#               for file in ${REQ_FILES[@]}; do rsync --relative --recursive $file DEPS_CACHE; done
#             fi
#       - save_cache:
#           key: firmware-python-reqs-v2-{{ checksum "WEST_CHECKSUM" }}
#           paths:
#             - ~/project/DEPS_CACHE
#       - run:
#           name: Test requirements are compiled
#           command: |
#             source .pysetupversions
#             python -m pip install \
#                 pip==$_PIP_VERSION \
#                 pip-tools==$_PIPTOOLS_VERSION \
#                 setuptools==$_SETUPTOOLS_VERSION \
#                 wheel==$_WHEEL_VERSION

#             source .circleci/scripts/utils.sh
#             list-changed-files | grep "whispy/ci-backend" && apt-get update && apt-get install -y libpq-dev

#             ./.circleci/scripts/test_pip_compiled.sh
#       - run:
#           name: Lint
#           command: |
#             ./scripts/devenv/lint.sh --all-files
#       - run:
#           name: Firmware style check
#           command: python firmware/tools/style.py check
#       - run:
#           name: Check submodules are up to date
#           command: |
#             git submodule update --recursive --init
#             source .envrc
#             ./.circleci/scripts/check_submodules.sh

#   setup-dynamic-config:
#     docker:
#       - image: cimg/python:3.9
#     resource_class: small
#     environment:
#       WORKFLOW_FILE: "selected_workflows.txt"
#       CHECKS_JSON: ".circleci/required_checks.json"
#       COMPILED_WORKFLOWS: "workflows"
#       COMPILED_CONFIG: "compiled.yml"
#     steps:
#       - checkout
#       - install-dependencies
#       - when:
#           condition:
#             equal: [ << pipeline.trigger_source >>, scheduled_pipeline ]
#           steps:
#             - run:
#                 name: Using the schedule name to trigger
#                 command: echo "<< pipeline.schedule.name >>" >> $WORKFLOW_FILE
#       - unless:
#           condition:
#             equal: [ << pipeline.trigger_source >>, scheduled_pipeline ]
#           steps:
#             - run:
#                 name: Generate the list of workflows to run
#                 command: |
#                   export MANUAL_WORKFLOW="<< pipeline.parameters.workflow >>"
#                   ./.circleci/scripts/determine_workflows.sh
#                   ./.circleci/scripts/snub_github_checks.sh
#       - run:
#           name: Compile all workflows into a single YAML file
#           command: ./.circleci/scripts/compile_yml.sh
#       - run:
#           name: Generate parameters passed to the next level
#           command: echo "{}" > /tmp/custom-pipeline-parameters.json
#       - store_artifacts:
#           path: "workflows"
#       - store_artifacts:
#           path: "compiled.yml"
#       - continuation/continue:
#           configuration_path: "compiled.yml"
#           parameters: /tmp/custom-pipeline-parameters.json

# workflows:
#   setup-workflow:
#     jobs:
#       - gen-agnostic-tests
#       - studio-common-pytest
#       - setup-dynamic-config:
#           requires:
#             - gen-agnostic-tests
#             - studio-common-pytest
