version: 2.1
orbs:
  node: circleci/node@4.7.0
  heroku: circleci/heroku@1.2.6

parameters:
  build-docs:
    type: boolean
    default: true
  build-code:
    type: boolean
    default: false

jobs:
  build-code:
    docker:
      - image: cimg/node:14.15.4
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn test
          name: Run tests
      - run:
          command: yarn build
          name: Build app
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  build-src: # this can be any name you choose
    docker:
      - image: cimg/node:17.2.0
    steps:
      - checkout
      - run:  
          command: |
            echo "hi"

workflows:
  on_commit:
    when: 
      - << pipeline.parameters.builds-docs >>
    jobs:
      - build_and_test
      # Follow instructions here to authenticate git for Heroku: https://devcenter.heroku.com/articles/git#http-git-authentication
      # The following code may be uncommented, onnce HEROKU_API_KEY & HEROKU_APP_NAME environemnt variables are present
      # Read more: https://circleci.com/docs/2.0/env-vars/
      # - deploy:
      #     requires:
      #       - build_and_test # only deploy if the build_and_test job has completed
      #     filters:
      #       branches:
      #         only: master # only deploy when on main/master

      version: 2.1

# executors:
#   whisper-system-gen2:
#     docker:
#       - image: us.gcr.io/whisper-cloud/whisper-system-gen2:0.0.8
#         auth:
#           username: _json_key
#           password: $GCLOUD_SERVICE_KEY
#     working_directory: /root/project
#     environment:
#       WHISPER_SYSTEM_ROOT: /root/project
#   rt685-hifi4-builder:
#     docker:
#       - image: us.gcr.io/whisper-cloud/rt685-hifi4-builder:0.0.9
#         auth:
#           username: _json_key
#           password: $GCLOUD_SERVICE_KEY
#     working_directory: /root/project
#     environment:
#       WHISPER_SYSTEM_ROOT: /root/project
# orbs:
#   windows: circleci/windows@2.4.0
#   gcp-cli: circleci/gcp-cli@2.4.0
#   github-cli: circleci/github-cli@1.0.4
#   slack: circleci/slack@4.1
# jobs:
#   setup_whispersystem_gen2:
#     executor: whisper-system-gen2
#     resource_class: small
#     environment:
#       WHISPER_VERSION_ENV_VARS: WHISPER_VERSION_RELEASE_NAME=1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV WHISPER_VERSION_RELEASE_NAME_BL=1.0.0+0 WHISPER_VERSION_VERSION_CORE=1.0.0 WHISPER_VERSION_COMMITS_SINCE_TAG=204 WHISPER_VERSION_BRANCH_NAME=liberato_addWayToManuallyRunASpecificPipeline WHISPER_VERSION_COMMIT_SHA=92841f1a WHISPER_VERSION_BUILD=DEV
#       WHISPER_VERSION_RELEASE_NAME_BL: 1.0.0+0
#       WHISPER_VERSION_RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#     steps:
#       - shallow-checkout-whispersystem:
#           skip-submodules: true
#       - run:
#           name: Create release directory
#           command: 'mkdir -p /root/project/releases_gen2/$RELEASE_NAME

#             echo $RELEASE_NAME > /root/project/releases_gen2/$RELEASE_NAME/.version

#             '
#       - persist_to_workspace:
#           root: /root/project/releases_gen2
#           paths:
#             - '*'
#   save_release_gen2:
#     executor: gcp-cli/google
#     resource_class: small
#     working_directory: /root/project
#     environment:
#       GOOGLE_PROJECT_ID: whisper-cloud
#       WHISPER_VERSION_ENV_VARS: WHISPER_VERSION_RELEASE_NAME=1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV WHISPER_VERSION_RELEASE_NAME_BL=1.0.0+0 WHISPER_VERSION_VERSION_CORE=1.0.0 WHISPER_VERSION_COMMITS_SINCE_TAG=204 WHISPER_VERSION_BRANCH_NAME=liberato_addWayToManuallyRunASpecificPipeline WHISPER_VERSION_COMMIT_SHA=92841f1a WHISPER_VERSION_BUILD=DEV
#       WHISPER_VERSION_RELEASE_NAME_BL: 1.0.0+0
#       WHISPER_VERSION_RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#     steps:
#       - shallow-checkout-whispersystem
#       - attach_workspace:
#           at: /root/project/releases_gen2
#       - configure-gcloud
#       - run:
#           name: Save Gen 2 Release folder to GCS
#           command: 'GCS_DEST="gs://whisper-build/releases_gen2/circleci/$RELEASE_NAME"

#             echo "Saving to $GCS_DEST"

#             gsutil -m rsync -r releases_gen2/$RELEASE_NAME $GCS_DEST

#             '
#   build-full-gen2-factory-artifact:
#     working_directory: ~/project
#     environment:
#       GOOGLE_PROJECT_ID: whisper-cloud
#       WHISPER_VERSION_ENV_VARS: WHISPER_VERSION_RELEASE_NAME=1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV WHISPER_VERSION_RELEASE_NAME_BL=1.0.0+0 WHISPER_VERSION_VERSION_CORE=1.0.0 WHISPER_VERSION_COMMITS_SINCE_TAG=204 WHISPER_VERSION_BRANCH_NAME=liberato_addWayToManuallyRunASpecificPipeline WHISPER_VERSION_COMMIT_SHA=92841f1a WHISPER_VERSION_BUILD=DEV
#       WHISPER_VERSION_RELEASE_NAME_BL: 1.0.0+0
#       WHISPER_VERSION_RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#     macos:
#       xcode: 13.2.1
#       resource_class: macos.x86.medium.gen2
#     steps:
#       - shallow-checkout-whispersystem
#       - configure-gcloud
#       - run:
#           name: Install brew dependencies
#           command: 'export WHISPER_SYSTEM_ROOT="$(pwd)"

#             ./scripts/devenv/install_brew_packages.sh

#             direnv allow .

#             '
#       - restore_cache:
#           keys:
#             - factory-artifact-generation-python-{{ checksum ".pysetupversions" }}
#       - run:
#           name: Install python
#           command: 'source .pysetupversions

#             pyenv install -s $_PYTHON_VERSION

#             '
#       - save_cache:
#           key: factory-artifact-generation-python-{{ checksum ".pysetupversions" }}
#           paths:
#             - ~/.pyenv/
#       - run:
#           name: Generate artifact
#           command: 'eval "$(pyenv init --path)"

#             eval "$(direnv export bash)"

#             ./factory/image_generation/mac_station/generate.sh factory/image_generation/mac_station/gen2_factory_machine.json

#             '
#       - store_artifacts:
#           path: ~/project/factory/images
#       - persist_to_workspace:
#           root: ~/project/factory/images
#           paths:
#             - '*.pkg'
#       - slack/notify:
#           event: fail
#           template: basic_fail_1
#   build-code-only-gen2-factory-artifact:
#     working_directory: ~/project
#     macos:
#       xcode: 13.2.1
#       resource_class: macos.x86.medium.gen2
#     steps:
#       - shallow-checkout-whispersystem:
#           skip-submodules: true
#       - run:
#           name: Generate artifact
#           command: "# Get deps\nbrew install jq\n\n# Generate\nsource .envrc\n./factory/image_generation/mac_station/generate.sh\
#             \ --code-only \\\n    factory/image_generation/mac_station/gen2_factory_machine.json\n"
#       - store_artifacts:
#           path: ~/project/factory/images
#       - persist_to_workspace:
#           root: ~/project/factory/images
#           paths:
#             - '*.pkg'
#       - slack/notify:
#           event: fail
#           template: basic_fail_1
#   build-factory-beaglebone-image:
#     machine:
#       image: ubuntu-2204:2022.04.1
#     environment:
#       WHISPER_VERSION_ENV_VARS: WHISPER_VERSION_RELEASE_NAME=1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV WHISPER_VERSION_RELEASE_NAME_BL=1.0.0+0 WHISPER_VERSION_VERSION_CORE=1.0.0 WHISPER_VERSION_COMMITS_SINCE_TAG=204 WHISPER_VERSION_BRANCH_NAME=liberato_addWayToManuallyRunASpecificPipeline WHISPER_VERSION_COMMIT_SHA=92841f1a WHISPER_VERSION_BUILD=DEV
#       WHISPER_VERSION_RELEASE_NAME_BL: 1.0.0+0
#       WHISPER_VERSION_RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       WHISPER_SYSTEM_ROOT: /home/circleci/project
#       CUSTOM_BB_DIR: /home/circleci/project/factory/image_generation/beaglebone
#       BB_LIB_DIR: /home/circleci/project/libraries/third_party/beaglebone_image_builder
#     steps:
#       - shallow-checkout-whispersystem
#       - run:
#           name: Install Dependencies
#           command: 'cd libraries/third_party/beaglebone_image_builder

#             ./scripts/install_dependencies.sh

#             sudo apt-get install tree

#             '
#       - run:
#           name: Build the Whisper Beaglebone Image
#           command: "cp ${CUSTOM_BB_DIR}/configs/* ${BB_LIB_DIR}/configs\ncp ${CUSTOM_BB_DIR}/scripts/*\
#             \ ${BB_LIB_DIR}/scripts\ncd $BB_LIB_DIR\n\n#image_name=\"${deb_distribution}-${release}-${image_type}-${deb_arch}-${time}\"\
#             \ntime=\"$(date +%Y-%m-%d)\"\nimage_name=\"debian-11.4-iot-armhf-${time}\"\
#             \ntarget=\"bbgg-${RELEASE_NAME}\"\nsize=\"4gb\"\n\n# Generic build\n./RootStock-NG.sh\
#             \ -c configs/whisper-bbgg-image.conf\n\n# Convert to a BeagleBone SD Image\n\
#             cd deploy/${image_name}\nsudo ./setup_sdcard.sh --img-4gb \"${target}-${image_name}\"\
#             \ \\\n  --dtb beaglebone --distro-bootloader --enable-cape-universal \\\
#             \n  --enable-uboot-disable-pru --enable-bypass-bootup-scripts \\\n  --enable-uboot-disable-emmc\
#             \ --enable-uboot-disable-video\n\n\n# Compress\nsudo xz -T0 -z -3 -v -v\
#             \ --verbose \"${target}-${image_name}-${size}.img\"\n\n# Move to artifact\
#             \ location\nmkdir -p ~/final_output\nmv ${target}-${image_name}-${size}.img.xz\
#             \ ~/final_output\n"
#       - store_artifacts:
#           path: ~/final_output
#   buildkite_gen2:
#     docker:
#       - image: cimg/python:3.9.1
#     resource_class: small
#     environment:
#       WHISPER_VERSION_ENV_VARS: WHISPER_VERSION_RELEASE_NAME=1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV WHISPER_VERSION_RELEASE_NAME_BL=1.0.0+0 WHISPER_VERSION_VERSION_CORE=1.0.0 WHISPER_VERSION_COMMITS_SINCE_TAG=204 WHISPER_VERSION_BRANCH_NAME=liberato_addWayToManuallyRunASpecificPipeline WHISPER_VERSION_COMMIT_SHA=92841f1a WHISPER_VERSION_BUILD=DEV
#       WHISPER_VERSION_RELEASE_NAME_BL: 1.0.0+0
#       WHISPER_VERSION_RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#       RELEASE_NAME: 1.0.0-D1+204-liberato_addWayToManuallyRunASpecificPipeline-92841f1a-DEV
#     parameters:
#       pipeline:
#         type: string
#       kick_off_only:
#         type: boolean
#         default: true
#       file_list_to_run_on:
#         type: string
#         default: ''
#     steps:
#       - checkout
#       - github-cli/setup
#       - run:
#           name: Python deps
#           command: pip install -r .circleci/requirements.txt
#       - run:
#           name: Run buildkite << parameters.pipeline >>
#           command: "#! TODO WAI-9571 -- push this to the base setup workflow\nif [\
#             \ -z \"<< parameters.file_list_to_run_on >>\" ] || [[ \"<< pipeline.git.branch\
#             \ >>\" == \"master\" ]]; then\n  RUN=true\nelse\n  source .circleci/scripts/utils.sh\n\
#             \  RUN=false\n  list_of_files=(\"<< parameters.file_list_to_run_on >>\"\
#             )\n  for file in ${list_of_files[@]}; do\n    if list-changed-files |\
#             \ grep \"$file\"; then\n      echo \"found change(s) to $file\"\n    \
#             \  RUN=true\n      break\n    else\n      echo \"no change(s) to $file\"\
#             \n    fi\n  done\nfi\n\nif $RUN; then\n  export $WHISPER_VERSION_ENV_VARS\n\
#             \  python3 .circleci/scripts/buildkite.py run-build \\\n    << parameters.pipeline\
#             \ >> $CIRCLE_SHA1 $CIRCLE_BRANCH $RELEASE_NAME \\\n    -e WHISPER_VERSION_RELEASE_NAME=\"\
#             $WHISPER_VERSION_RELEASE_NAME\" \\\n    -e WHISPER_VERSION_RELEASE_NAME_BL=\"\
#             $WHISPER_VERSION_RELEASE_NAME_BL\" \\\n    -e WHISPER_VERSION_VERSION_CORE=\"\
#             $WHISPER_VERSION_VERSION_CORE\" \\\n    -e WHISPER_VERSION_COMMITS_SINCE_TAG=\"\
#             $WHISPER_VERSION_COMMITS_SINCE_TAG\" \\\n    -e WHISPER_VERSION_BRANCH_NAME=\"\
#             $WHISPER_VERSION_BRANCH_NAME\" \\\n    -e WHISPER_VERSION_COMMIT_SHA=\"\
#             $WHISPER_VERSION_COMMIT_SHA\" \\\n    -e WHISPER_VERSION_BUILD=\"$WHISPER_VERSION_BUILD\"\
#             \ \\\n    --kick_off_only << parameters.kick_off_only >>\nelse\n  source\
#             \ .circleci/scripts/github_lib.sh\n  set_gh_check \"success\" \"Snubbed\"\
#             \ \"buildkite/<< parameters.pipeline >>\"\nfi\n"
#   run_tests_gen2:
#     executor: whisper-system-gen2
#     steps:
#       - setup-whispersystem-gen2
#       - run:
#           name: Test Studio
#           command: 'source .envrc

#             pytest $ACTIVE_STUDIO_SRC --ignore=$ACTIVE_STUDIO_SRC/system_tests

#             pytest factory/stage/unit_tests

#             '
#       - run:
#           name: Test audio environmental estimation library
#           command: 'source .envrc

#             cd libraries/gen2/audio/env_estimates/tests

#             make run_all_tests  # c tests

#             '
#       - run:
#           name: Test audio vad library
#           command: 'source .envrc

#             cd libraries/gen2/audio/vad/tests

#             make test  # c tests

#             '
#       - run:
#           name: Test MLNR escalation library
#           command: 'source .envrc

#             cd libraries/gen2/audio/escalation_policy/tests

#             make test  # c tests

#             '
#       - run:
#           name: Test priority logging library
#           command: 'source .envrc

#             cd firmware/shared/priority_logging

#             make run_tests # c tests

#             '
#   test-gen2-factory-artifact:
#     working_directory: ~/project
#     macos:
#       xcode: 13.2.1
#       resource_class: macos.x86.medium.gen2
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/project/factory/images
#       - run:
#           name: Install full artifact
#           command: 'cd ~/project/factory/images

#             sudo installer -target / -pkg "$(ls | grep ''^full'')"

#             '
#       - run:
#           name: Test the installed image
#           command: 'cd ~/whisper_factory

#             eval "$(direnv export bash)"

#             pytest ~/project/factory/image_generation/mac_station/tests

#             '
#       - run:
#           name: Install code only artifact
#           command: 'cd ~/project/factory/images

#             sudo installer -target / -pkg "$(ls | grep ''^code-only'')"

#             '
#       - run:
#           name: Test the installed image
#           command: 'cd ~/whisper_factory

#             eval "$(direnv export bash)"

#             pytest ~/project/factory/image_generation/mac_station/tests

#             '
#       - slack/notify:
#           event: fail
#           template: basic_fail_1
# commands:
#   dependencies-gen2:
#     parameters:
#       linux-vm:
#         type: boolean
#         default: false
#     steps:
#       - run:
#           name: Compile reqs hashfile
#           command: 'git submodule status libraries/gen2/whisper_protobuf/ >> VENV_HASH_FILE

#             git submodule status libraries/third_party/opus_celt/ >> VENV_HASH_FILE

#             md5sum whispy/studio-gen2/setup.py >> VENV_HASH_FILE

#             md5sum whispy/studio-gen2/requirements.txt >> VENV_HASH_FILE

#             '
#       - restore_cache:
#           keys:
#             - studiogen2-unix-venv-vm-<< parameters.linux-vm >>-v1-{{ checksum "VENV_HASH_FILE"
#               }}-new
#       - run:
#           name: Install modern CMake
#           command: "if [[ \"<< parameters.linux-vm >>\" = \"true\" ]]; then\n  sudo\
#             \ apt remove -y cmake\n  sudo apt install -y curl\n  curl -sSL -O https://github.com/Kitware/CMake/releases/download/v3.23.0/cmake-3.23.0-Linux-x86_64.sh\n\
#             \  chmod +x cmake-3.23.0-Linux-x86_64.sh\n  ./cmake-3.23.0-Linux-x86_64.sh\
#             \ --skip-license --include-subdir\n  rm -rf cmake-3.23.0-linux-x86_64/man\n\
#             \  sudo cp -r cmake-3.23.0-linux-x86_64/* /usr/local\n  rm -rf cmake-3.23.0-Linux-x86_64.sh\
#             \ cmake-3.23.0-linux-x86_64\nelse\n  echo 'Bypassing since CMake is installed\
#             \ inside the Docker environment'\nfi\n"
#       - run:
#           name: Install dependencies gen 2
#           command: "source .envrc\nsource scripts/devenv/utils.sh set-gen 2\nsource\
#             \ .envrc\nif ! [ -d $ACTIVE_STUDIO_VENV ]; then\n  python3.9 -m venv $ACTIVE_STUDIO_VENV\n\
#             \  source $ACTIVE_STUDIO_VENV/bin/activate\n  source .pysetupversions\n\
#             \  python -m pip install pip==$_PIP_VERSION pip-tools==$_PIPTOOLS_VERSION\
#             \ setuptools==$_SETUPTOOLS_VERSION\n  pushd $ACTIVE_STUDIO_ROOT\n  pip-sync\
#             \ requirements.txt --verbose\n  popd\n\n  #! Linux VM doesn't need celt\n\
#             \  << parameters.linux-vm >> && SKIP_CELT=true\n\n  ./firmware/install_fw_deps.sh\n\
#             \  pip install whispy/studio-gen2\nfi\n"
#       - save_cache:
#           key: studiogen2-unix-venv-vm-<< parameters.linux-vm >>-v1-{{ checksum "VENV_HASH_FILE"
#             }}-new
#           paths:
#             - ~/project/whispy/venvs/studiogen2
#   setup-whispersystem-gen2:
#     parameters:
#       linux-vm:
#         type: boolean
#         default: false
#     steps:
#       - shallow-checkout-whispersystem
#       - dependencies-gen2:
#           linux-vm: << parameters.linux-vm >>
#   windows-e8300-toolchain:
#     steps:
#       - run:
#           name: Install E8300 toolchain
#           shell: powershell.exe
#           command: '# Early exit if env:GET_E8300_SDK is set to $true

#             if ((Test-Path env:GET_E8300_SDK) -and ($env:GET_E8300_SDK -eq $false))
#             { Exit }


#             # Force web requests to allow TLS v1.2 (Required for requests to Chocolatey.org)

#             [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol
#             -bor 3072

#             # Set Execution Policy (Required for requests to Chocolatey.org)

#             Set-ExecutionPolicy Bypass -Scope Process -Force


#             # Install misc dependencies needed for CI

#             Invoke-WebRequest -Uri "https://storage.googleapis.com/whisper-public/OpenVPNamd64.msi"
#             -OutFile "C:\OpenVPNamd64.msi"

#             msiexec.exe /i C:\OpenVPNamd64.msi /qn /norestart


#             # Set license file variable

#             SETX /m SNPSLMD_LICENSE_FILE "27020@10.138.0.2"


#             # Add Onsemi binaries and VPN to path

#             $new_entry = ''C:\Program Files (x86)\ON Semiconductor\Ezairo 8300 SDK\bin\;C:\Program
#             Files\OpenVPN\bin\''

#             $old_path = [Environment]::GetEnvironmentVariable(''path'', ''machine'');

#             $new_path = $old_path + '';'' + $new_entry

#             [Environment]::SetEnvironmentVariable(''path'', $new_path,''Machine'');


#             # Download and extract toolchains

#             echo $Env:GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-

#             mkdir "C:\Program Files (x86)\ON Semiconductor"

#             cd "C:\Program Files (x86)\ON Semiconductor"

#             gsutil cp gs://whisper-build/ezairo/e8300_edk_files_1.2_v3.tar.gz e8300_edk_files_1.2.tar.gz

#             tar -xpf e8300_edk_files_1.2.tar.gz

#             echo "Done extracting!"

#             '
#   windows-dependencies-gen2:
#     steps:
#       - run:
#           name: Compile reqs hashfile
#           shell: bash.exe
#           command: 'git submodule status libraries/gen2/whisper_protobuf/ >> VENV_HASH_FILE

#             git submodule status libraries/third_party/opus_celt/ >> VENV_HASH_FILE

#             md5sum whispy/studio-gen2/setup.py >> VENV_HASH_FILE

#             md5sum whispy/studio-gen2/requirements.txt >> VENV_HASH_FILE

#             '
#       - run:
#           name: Dummy studio setup
#           command: '# Cache a dummy studio -- before restore so we can use it if necessary

#             # This allows us to skip restoring python dependencies if we don''t need
#             them

#             if (Test-Path "SKIP_WINDOWS_STUDIO") { mv SKIP_WINDOWS_STUDIO _TEMP_FILE
#             }

#             echo "true" > SKIP_WINDOWS_STUDIO

#             mkdir whispy/venvs/studiogen2 -ea 0

#             echo "filler" > whispy/venvs/studiogen2/dummy

#             '
#       - save_cache:
#           key: studiogen2-windows-venv-v1-{{ checksum "VENV_HASH_FILE" }}-{{ checksum
#             "SKIP_WINDOWS_STUDIO" }}
#           paths:
#             - /project/whispy/venvs/studiogen2
#       - run:
#           name: Revert SKIP_WINDOWS_STUDIO file if it existed. Otherwise set to false
#           command: "# Effectively if SKIP_WINDOWS_STUDIO has true in it, we get the\
#             \ dummy studio\n# Otherwise (if it doesn't exist or doesn't have true\
#             \ in it) we grab the real studio cache\nRemove-Item SKIP_WINDOWS_STUDIO\n\
#             Remove-Item 'whispy/venvs' -Recurse\nif (Test-Path _TEMP_FILE) {\n   mv\
#             \ _TEMP_FILE SKIP_WINDOWS_STUDIO\n}\nelse {\n  echo \"false\" > SKIP_WINDOWS_STUDIO\n\
#             \  choco install python --version 3.9.11\n}\n"
#       - restore_cache:
#           keys:
#             - studiogen2-windows-venv-v1-{{ checksum "VENV_HASH_FILE" }}-{{ checksum
#               "SKIP_WINDOWS_STUDIO" }}
#       - run:
#           name: Studio setup
#           shell: powershell.exe
#           command: "# Early exit if the venv exists\nif (Test-Path \"whispy/venvs/studiogen2\"\
#             ) { Exit }\n\n# Add protoc compiler, whisper_protobuf is built as part\
#             \ of studio installation\nchoco install protoc\n\nbash.exe scripts/devenv/utils.sh\
#             \ set-gen 2\npython -m venv whispy/venvs/studiogen2\n./whispy/venvs/studiogen2/Scripts/Activate.ps1\n\
#             \n(type .pysetupversions) -replace 'export ','[Environment]::SetEnvironmentVariable(\"\
#             ' `\n  > pysetup1\n(type pysetup1) -replace '=','\",\"' > pysetup2\n(type\
#             \ pysetup2) -replace '$','\", \"machine\")' > pysetup3\nforeach($line\
#             \ in Get-Content .\\pysetup3) { Invoke-Expression $line }\n\npython -m\
#             \ pip install `\n  pip==\"$([Environment]::GetEnvironmentVariable('_PIP_VERSION',\
#             \ 'machine'))\" `\n  setuptools==\"$([Environment]::GetEnvironmentVariable('_SETUPTOOLS_VERSION',\
#             \ 'machine'))\" `\n  pip-tools==\"$([Environment]::GetEnvironmentVariable('_PIPTOOLS_VERSION',\
#             \ 'machine'))\" `\n  wheel==\"$([Environment]::GetEnvironmentVariable('_WHEEL_VERSION',\
#             \ 'machine'))\"\n\npushd whispy/studio-gen2\npip-sync requirements.txt\n\
#             popd\n"
#       - save_cache:
#           key: studiogen2-windows-venv-v1-{{ checksum "VENV_HASH_FILE" }}-{{ checksum
#             "SKIP_WINDOWS_STUDIO" }}
#           paths:
#             - /project/whispy/venvs/studiogen2
#   shallow-checkout:
#     description: checkout by git shallow clone
#     parameters:
#       depth:
#         default: 1
#         description: 'Limit fetch depth to the specified number of commit from a remote
#           branch history. Refer git fetch documentation for more information.

#           '
#         type: integer
#       fetch_depth:
#         default: 10
#         description: 'Addtional fetch depth to the specified number of commit from
#           a remote branch history. Pass more number then depth when you want to check
#           futher commit history.

#           '
#         type: integer
#       windows:
#         default: false
#         description: change the behavior if windows is flagged
#         type: boolean
#     steps:
#       - when:
#           condition: << parameters.windows >>
#           steps:
#             - run:
#                 name: Checkout code (windows)
#                 command: echo "Not Implemented"; Exit 1
#       - unless:
#           condition: << parameters.windows >>
#           steps:
#             - run:
#                 name: Checkout code (non-windows)
#                 command: "mkdir -p ~/.ssh\nssh-keyscan -H github.com >> ~/.ssh/known_hosts\n\
#                   \n# checkout\ngit clone --depth << parameters.depth >> $CIRCLE_REPOSITORY_URL\
#                   \ .\n\n# Fetch remote and check the commit ID of the checked out\
#                   \ code\nif [ -n \"$CIRCLE_TAG\" ]\nthen\n  # tag\n  git fetch --tags\
#                   \ --depth << parameters.fetch_depth >> --force origin \"+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}\"\
#                   \nelif [[ $(echo $CIRCLE_BRANCH | grep -E ^pull\\/[0-9]+$) ]] #\
#                   \ sh version of bash `elif [[ \"$CIRCLE_BRANCH\" =~ ^pull\\/[0-9]+$\
#                   \  ]]`\nthen\n  # pull request\n  git fetch --no-tags --depth <<\
#                   \ parameters.fetch_depth >> --force origin \"${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}\"\
#                   \nelse\n  # others\n  git fetch --no-tags --depth=<< parameters.fetch_depth\
#                   \ >> --force origin \"$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH\"\
#                   \nfi\n\n# Check the commit ID of the checked out code\nif [ -n \"\
#                   $CIRCLE_TAG\" ]\nthen\n  git reset --hard \"$CIRCLE_SHA1\"\n  git\
#                   \ checkout -q \"$CIRCLE_TAG\"\nelif [ -n \"$CIRCLE_BRANCH\" ] &&\
#                   \ [ \"$CIRCLE_BRANCH\" != 'HEAD' ]\nthen\n  git reset --hard \"\
#                   $CIRCLE_SHA1\"\n  git checkout -q -B \"$CIRCLE_BRANCH\"\nfi\n\n\
#                   git reset --hard \"$CIRCLE_SHA1\"\n"
#   checkout-whispersystem:
#     steps:
#       - checkout
#       - run:
#           name: Checkout submodules
#           command: git submodule update --init --recursive
#           environment:
#             GIT_LFS_SKIP_SMUDGE: 1
#   shallow-checkout-whispersystem:
#     parameters:
#       skip-submodules:
#         type: boolean
#         default: false
#     steps:
#       - shallow-checkout
#       - run:
#           name: Checkout submodules
#           command: 'eval "<< parameters.skip-submodules >>" || git submodule update
#             --init --recursive --depth 1

#             '
#           environment:
#             GIT_LFS_SKIP_SMUDGE: 1
#   configure-gcloud:
#     steps:
#       - gcp-cli/install
#       - gcp-cli/initialize
#   check-release-exists:
#     steps:
#       - run:
#           name: Check for release
#           command: "start=$SECONDS\nwhile ! scripts/get_release.sh $RELEASE_NAME --check;\n\
#             do\n    diff=$(($SECONDS - start))\n    if [ $diff -gt 1200 ]; then #\
#             \ 20 minutes\n        echo \"$RELEASE_NAME not found in GCP, this may\
#             \ trigger a failure on buildkite if it is not available by the time buildkite\
#             \ is run\" &&\n        exit 1\n    fi\n    sleep 30s # Sleep and try again\n\
#             done\n"
# workflows:
#   build-factory-beaglebone-image:
#     jobs:
#       - build-factory-beaglebone-image
